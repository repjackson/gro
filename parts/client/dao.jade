template(name='dao')
    .ui.stackable.grid
        .row
            .sixteen.wide.column
                if skv_is 'thinking' true
                    i.big.yin.yang.loading.icon
                // unless viewing_doc
                    // i#clear_tags.link.yin.yang.big.icon(class=thinking_class)
                if selected_tags
                    // if many_tags
                    //     a#clear_tags.ui.black.invert.icon.compact.button.select_term
                    //         i.remove.icon
                    each selected_tags
                        +unselect_tag
                .ui.left.icon.input(class=thinking_class)
                    i.search.grey.icon
                    input.search_title(type='text' autofocus='')
                each tag_results
                    +tag_selector
                // .ui.header 
                //     i.smile.large.grey.icon
                //     |emotion
                // .spacer
                each selected_emotions
                    .ui.black.compact.button.unselect_emotion
                        |#{this}
                each emotion_results
                    if name
                        .ui.compact.basic.button.select_emotion
                            |#{name}
                .ui.large.basic.label(title='results') #{doc_count} results
                .spacer
                // .five.wide.right.aligned.column
                // .eleven.wide.column
            .four.wide.column
                +emotion_mode k='joy' i='happy--v1' i2='smile' c='invert green'
                +emotion_mode k='sadness' i='sad--v1' i2='sad tear' c='invert blue'
                +emotion_mode k='anger' i='angry--v1' i2='frown' c='invert red'
                +emotion_mode k='disgust' i='disgusting' i2='grin tongue squint' c='invert orange'
                +emotion_mode k='fear' i='scream' i2='tired' c='black'
                .ui.inline.header 
                    i.users.large.grey.icon
                    |group
                each selected_subreddits
                    .ui.black.compact.button.unselect_subreddit
                        |#{this}
                each subreddit_results
                    +select_subreddit
                .spacer
                .spacer
                .ui.inline.header 
                    i.database.large.icon
                    |sources
                each selected_models
                    .ui.black.compact.button.unselect_model
                        |#{this}
                each model_results
                    .ui.compact.button.select_model
                        |#{name}
                i.smile.large.icon
                div
                // .four.wide.center.aligned.column
                +view_mode k='twitter' i='twitter' c='blue'
                +view_mode k='video' i='youtube' c='red'
                +view_mode k='image' i='picture' c='green'
                +view_mode k='posts' i='newspaper' c='teal'
                +view_mode k='wikipedia' i='wikipedia' c='purple'
                +view_mode k='stackexchange' i='stack exchange disabled'
                +view_mode k='github' i='github disabled'
                +view_mode k='alpha' i='disabled brain'
                // +view_mode k='porn' i='mercury'
                +view_mode k='bitcoin' i='bitcoin disabled'
                +view_mode k='covid' i='covid disabled'
            .six.wide.column.scrolling
                .ui.segment
                    .ui.header 
                        i.large.reddit.icon
                        |reddit
                    .ui.cards
                        each docs
                            +doc
                    
            .six.wide.column
                .ui.segment
                    .ui.header search doc
                    .ui.header searched #{input_count} times
                    each searchers
                        .ui.header #{username}
                // with search_doc
                .ui.segment
                    +comments
                .ui.segment 
                    |requests
                .ui.segment
                    |offers
                .ui.segment 
                    |photos
            
                .ui.segment
                    .ui.header
                        i.large.wikipedia.icon
                        |wikipedia
                // div(class="{{#unless viewing_doc}} five wide column {{/unless}}")
                unless viewing_doc
                    if skv_is 'loading_alpha' true
                        i.big.brain.loading.icon 
                        |alpha...
                    else
                        each alphas
                            .ui.segment
                                i.large.brain.icon
                                if response.queryresult
                                    +alpha 
                        // if many_tags
                        //     each alpha_singles
                        //         if response.queryresult
                        //             +alpha 
                    if skv_is 'loading_duck' true
                        i.big.globe.loading.icon 
                        |duck duck go...
                    else
                        unless viewing_doc
                            each ducks
                                .ui.segment
                                    +duck 
                    // div(class="{{#unless viewing_doc}} eleven wide column {{else}} sixteen wide column {{/unless}}")
                    unless viewing_doc
                        // |limit
                        // .ui.dropdown
                        //     span.text dropdown
                        //     i.dropdown.icon
                        //     .menu 
                        //         +skve k='limit' v=1 l='1'
                        //         +skve k='limit' v=10 l='10'
                        //         .item 1
                        //         .item 5
                        //         .item 10
                        //         .item 20
                        // |sort
                        // +skve k='sort_key' v='_timestamp' l='when'
                        // +skve k='sort_key' v='bounty' l='bounty'
                        // +skve k='sort_direction' v=-1 l='up'
                        // +skve k='sort_direction' v=1 l='down'
                        // |view
                        // +skve k='view_mode' v='cards' l='cards' i='squared-menu' ionly=true
                        // +skve k='view_mode' v='list' l='list' i='list' ionly=true
                    
                //     +session_edit_value_button k='view_section' v='tone' l='tone' i='smile'
                
                
template(name="doc")
    .ui.card(class=card_class)
        if skv_is 'thinking' true
            .ui.placeholder
                .rectangular.image
            .content
                .ui.fluid.placeholder
                    .header
                        .line
                    .line
                    .line
                    .line
                    .line
        else
            // if embed
            //     .rounded.full
            //         |!{embed}
            // else
            if is_image
                img.ui.centered.image.pointer.zoomer.invert.toggle_view(src=url)
            else if watson.metadata.image
                img.ui.rounded.inline.pointer.zoomer.image.invert.toggle_view(src=watson.metadata.image)    
    
            .content
                span.ui.pointer.text.f13.zoomer.toggle_view(class=post_header_class) !{title}
                    // small #{max_emotion_name}
                // |#{points}
                    // unless one_post
                    //     i.chevron.right.big.grey.link.icon.forward
                if viewing_doc
                    .ui.icon.basic.button.vote_down
                        i.caret.down.big.grey.icon
                    .ui.icon.basic.button.vote_up
                        i.caret.up.big.grey.icon
                    .ui.big.basic.button.read 
                        i.rss.icon
                        |read
                    .ui.icon.button.bookmark
                        i.bookmark.icon
                    
                    // if is_image
                    //     img.ui.centered.image(src=url)
                    span.invert
                        |!{embed}
                    // else if is_twitter
                    //     blockquote.twitter-tweet(data-dnt='true' data-theme='dark')
                    //         p(lang='en' dir='ltr')
                    //             | Twitter Support you must have the patience of 1000 camels waiting for a drink of water while the baby camels get the first drinks...does that make sense? Thank you for your dedication and time you selfishly give to each of us. You are always appreciated.
                    //         | â€” KayeMc76 (@KayeMc76) 
                    //         a(href=url) October 3, 2020
                    // else if is_youtube
                    //     div
                    //     .ui.fluid.embed
                    //         iframe(id="ytplayer" type="text/html" width="100%" height="500" src="https://www.youtube.com/embed/#{youtube_parse}" frameborder="0" allowfullscreen)
                        // iframe(width="100%" height="600" src="https://www.youtube.com/embed/#{youtube_parse}?autoplay=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
                        // else if is_video
                        //     div
                        //     // iframe(width="100%" height="600" src="https://v.redd.it/9vk3khyb08e51/DASH_360.mp4?source=fallback" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
                        //     iframe(width="100%" height="600" src=url frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
                    // else
                    //     iframe(width="100%" height="500" src=url frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)        
                    // .medscroll
                    // 
                    a.ui.label(href="https://www.reddit.com#{permalink}" target="_window") r/#{subreddit}
                    // .ui.big.label 
                    //     i.user.outline.icon
                    //     |#{author}
                    .ui.label
                        i.thumbs.up.outline.icon
                        |#{ups}
                    a.ui.inline.header(href=url target='_window')
                        | #{url}
                    // .ui.label
                    //     | #{domain}
                    // .spacer
                    // .nl2br
                    // |!{html}
                    // .spacer
                    // pre
                    // .nl2br
                    // if viewing
                    
                    +call_watson
                    if watson    
                        unless tone
                            +call_tone    
                    if parsed_selftext_html
                        .ui.segment
                            |!{parsed_selftext_html}
                    else if selftext
                        .ui.segment
                            |{{nl2br selftext}}
                    else if body
                        div
                        .ui.segment
                            |{{nl2br body}}
                    // else if tone
                    //     .spacer
                    //     +tone
                    // div(style='position:relative; padding-bottom:calc(125.00% + 44px)')
                    //     iframe(src='https://gfycat.com/ifr/MeanFatAmurratsnake' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen)
                    // |{{selftext}}
                    // +convert
                    a.ui.icon.big.basic.button(href=url target='_window' title=domain)
                        i.external.icon
                        |view site 
                        |#{domain}
                    // a.ui.center.aligned.header(href=url target='_window' class=post_header_class title=url) #{title}
    
                    // .spacer
                    // div
                    if tone
                        +tone
                    each tags
                        +doc_tag
                    // |#{tags.length}
                    .ui.icon.input
                        i.plus.grey.icon
                        input.tag_post(type='text')
                    // i.code.link.icon.print_me
                
            
                
template(name='view_mode')
    a.ui.tertiary.basic.button.toggle_view
        i.link.zoomer.icon(class="#{toggle_view_class} #{thinking_class}" title=k)
        |#{k}

template(name='emotion_mode')
    .ui.tertiary.button.toggle_emotion
        i.link.zoomer.icon(class="#{toggle_emotion_class} #{thinking_class}" title=t)
        |#{k}
    // if selected_emotion
    //     i.huge.pointer.zoomer.icon.toggle_emotion(class="#{i2} #{color}" title=t)
    //     // img.ui.inline.image.toggle_emotion.zoomer.pointer(src="https://img.icons8.com/color/50/000000/#{icon}.png" class=cl title=t)
    // else
    //     i.big.grey.pointer.zoomer.icon.toggle_emotion(class="#{i2}" title=t)
    //     // img.ui.inline.image.toggle_emotion.zoomer.pointer(src="https://img.icons8.com/ios/36/000000/#{icon}.png" class=cl title=t)


template(name='pull_reddit')
    .ui.icon.button.pull
        i.reddit.icon
        
template(name='call_watson')
    .ui.icon.button.pull
        i.dna.icon

template(name='convert')
    .ui.icon.button.convert
        i.exchange.icon


template(name='unselect_tag')
    a.unselect_tag.ui.black.big.image.label.invert.select_term(href='#')
        if term
            img.ui.avatar.compact.image(src=term.watson.metadata.image)    
        strong #{this}

template(name='tag_selector')
    // a.ui.tertiary.basic.button.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    a.ui.big.image.basic.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.invert.image(src=term.watson.metadata.image)    
        | #{name}
        // small #{count}
        
template(name='select_subreddit')
    // a.ui.tertiary.basic.button.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    a.ui.image.basic.label.pointer.zoomer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.invert.image(src=term.watson.metadata.image)    
        | #{name}
        // small #{count}

template(name='doc_tag')
    a.ui.image.big.label.pointer.zoomer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            img.ui.avatar.compact.image(src=term.watson.metadata.image)    
        | #{this}
        // small #{count}


template(name='duck')
    with content
        // .ui.segment
        .ui.inline.header #{Heading}
        // .item abstract #{Abstract}
        .item.abstract !{AbstractText}
        // a.ui.icon.button(href=AbstractURL)
        //     // #{AbstractURL}
        //     i.large.external.icon
        img(src=Image)
        each RelatedTopics
            if Text
                // .ui.compact.button.topic
                .ui.tertiary.basic.button.topic(class=thinking_class)
                    img.ui.tiny.inline.rounded.image(src=Icon.URL)
                    |#{Text}
                    // | {{lowered Text}}
            // .content
            //     .item #{FirstURL}
                // .item !{Result}



template(name='alpha')
    with response.queryresult
        // .ui.inline.header #{datatypes}
        // each split_datatypes
        //     .ui.button.basic.compact.buton.select_datatype
        //         |#{this}
        // .ui.list
            // .item success: #{success}
            // .item error: #{error}
            // .item numpods: #{numpods}
            // .item datatypes: #{datatypes}
                // each datatypes
                //     .ui.button
                //         |#{this}
            // .item timedout: #{timedout}
            // .item timedoutpods: #{timedoutpods}
            // .item timing: #{timing}
            // .item parsetiming: #{parsetiming}
            // .item parsetimedout: #{parsetimedout}
            // .item recalculate: #{recalculate}
            // .item id: #{id}
            // .item host: #{host}
            // .item server: #{server}
            // .item related: #{related}
            // .item version: #{version}
        each pods
            div
            // .ui.small.inline.middle.aligned.header.middled #{title}
            .ui.small.inline.header #{title}
            div
            // .item #{scanner}
            // .item id #{id}
            // .item position #{position}
            // .item error #{error}
            // .item numsubpods #{numsubpods}
            // .item subpods
            // .ui.list
            each subpods
                // .ui.small.inline.header #{title}
                img.ui.zoomer.pointer.image.invert.alphatemp(src=img.src)
                // .item.alphatemp
                // |#{plaintext}
                // .item title: #{title}
                // .item primary: #{primary}
    // each tags
    //     .ui.label #{this}
    // .alphatemp voice: #{voice}
    //   div assumptions": {
    //     "type": "Clash",
    //     "word": "time",
    //     "template": "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead",
    //     "count": 4,
    //     "values": [
    //       {
    //         "name": "CalendarWord",
    //         "desc": " referring to a calendar computation",
    //         "input": "*C.time-_*CalendarWord-"
    
    
    
    
template(name='tone')
    // h3 tone
    .ui.horizontal.list
        each tone.result.document_tone.tones
            .item #{tone_id} {{ to_percent score }}%
    .ui.list
        each tone.result.sentences_tone
            .item(class=sentence_class)
                //- span #{sentence_id}
                span.tone_item.ui.zoomer.pointer.text(title="#{sentence_id}" class="#{tone_size} #{sentence_color}") 
                    |{{lowered text}}
                    // .content
                    // .inline.header(title="#{sentence_id}") {{lowered text}}
                    // |weight:#{weight}
                    // i.chevron.up.link.grey.large.icon.upvote_sentence
                    // i.chevron.down.link.grey.large.icon.downvote_sentence
                    // each tones
                    //     .ui.inverted.invert.small.compact.label(class="#{tone_label_class}") 
                        // .ui.small.compact.inverted.label(class="{{calculated_size 'weight'}} #{tone_label_class}") 
                            span.ui.text
                                |#{tone_id} &nbsp;
                            | {{ to_percent score }}% 
                    // .ui.mini.transparent.icon.input
                    //     input.tag_sentence(type='text' placeholder='tag')
                    // each tags 
                    //     .ui.label #{this}
    // unless tone                
    //- #call_tone.ui.icon.button
    //-     i.refresh.icon
            // +jsonView(json=tone)


template(name='call_tone')
    button.ui.large.button.call
        i.big.download.icon
        // |call tone
        |download
    if page_doc.tone 
        i.checkmark.icon