template(name='user')
    unless user_doc
        // .ui.header no user found
        .ui.hidden.divider
        .ui.hidden.divider
        .ui.hidden.divider
        .ui.center.aligned.basic.segment.search
            i.massive.grey.user.outline.loading.link.icon.get_user_info
            .ui.big.header
                |#{current_username}...
        // .ui.massive.fluid.button.f17.zoomer.pointer.search 
        //     i.download.icon
            // |download user info
    with user_doc
        .ui.stackable.padded.grid
            .row
                .three.wide.column
                    img.ui.image(src=data.snoovatar_img)
                    a.ui.circular.basic.icon.button(href="/users")
                        i.chevron.left.icon
                        i.large.users.icon
                    .ui.large.inline.header.get_user_posts(class=post_header_class)
                        |!{username} 
                        small(title='reputation') {{ commafy karma }}
                        // strong(title="#{site} rank") ##{site_rank} 
                        strong(title='global rank') ##{global_rank}
                    with data
                        .ui.list
                            .item #{total_karma} total karma
                            .item #{comment_karma} comment karma
                            .item #{link_karma} link karma
                            .item #{awardee_karma} awardee karma
                            .item #{awarder_karma} awarder karma
                            .item created {{ufrom created_utc}}
                        if is_gold
                            i.large.yellow.star.icon(title='is gold')
                        if is_mod
                            i.large.blue.shield.icon(title='is mod')
                        if has_verified_email
                            i.large.mail.icon(title='verified email')
                    i.info.icon.get_user_info
                    img.ui.rounded.inline.image.pointer.zoomer(src=profile_image)
                    a.ui.large.compact.basic.button(href="http://www.reddit.com/user/#{username}" target='_window' title="#{site} profile")
                        i.reddit.icon
                        i.external.icon
                    +print_this
                    +user_top_emotions     
                .thirteen.wide.column
                    each tags
                        .ui.basic.label.search_tag #{this}
                    if selected_user_post_tags
                        each selected_user_post_tags
                            +user_post_unpick_tag
                    .ui.icon.input
                        i.search.icon
                        input.search_user_postreddit(type='text')
                
                    .ui.inline.header 
                        i.edit.icon
                        |#{user_posts.count}
                        |posts
                    each user_post_tag_results
                        // .ui.label #{this}
                        // +user_post_selector
                        .ui.basic.small.label(title=count) #{name}
                    .medscroll
                        each user_posts
                            +user_post
                    .ui.inline.header.get_user_comments
                        i.chat.outline.icon
                        |#{user_comments.count}
                        |comments
                    each user_comment_tag_results
                        // .ui.label #{this}
                        // +user_post_selector
                        .ui.small.basic.label(title=count) #{name}
                    .medscroll
                        each user_comments
                            +user_comment
                            .ui.divider
                    
                    
                    
template(name='user_top_emotions')
    .ui.basic.label {{ to_percent avg_sent_score}} sentiment
    .ui.green.basic.large.label
        | {{ to_percent avg_joy_score}}% joyful
        | {{fixed0 rep_joy}} ##{global_joy_rep_rank}

    .ui.blue.basic.large.label
        |{{fixed0 rep_sadness}} sad rep
        | {{ to_percent avg_sadness_score}}% ##{global_sadness_rep_rank}

    .ui.red.basic.large.label 
        | {{ to_percent avg_anger_score}}% angry
        | {{fixed0 rep_anger}} rep ##{global_anger_rep_rank}

    .ui.orange.basic.large.label
        |{{fixed0 rep_disgust}} disgust rep
        | {{ to_percent avg_disgust_score}}% ##{global_disgust_rep_rank}

    .ui.grey.basic.large.label
        |{{fixed0 rep_fear}} fear rep
        | {{ to_percent avg_fear_score}}% ##{global_fear_rep_rank}

                    
                                
template(name='user_post')
    .ui.item
        if embed
            span.rounded.full
                |!{embed}
            div
        else if data.is_reddit_media_domain
            a.view_post(href="/r/#{data.subreddit}/post/#{_id}" class=post_header_class)
                img.ui.inline.rounded.zoomer.image.toggle_view(src=data.url)
        else if watson.metadata.image.length
            a.view_post(href="/r/#{data.subreddit}/post/#{_id}" class=post_header_class)
                img.ui.rounded.inline.zoomer.image.toggle_view(src=watson.metadata.image)
        else if has_thumbnail
            a.view_post(href="/r/#{data.subreddit}/post/#{_id}" class=post_header_class)
                img.ui.rounded.inline.zoomer.image.zoomer(src=data.thumbnail)    

        // +skve k='view_preview' v='preview' l=' ' i='caret down'
        // if skv_is 'view_preview' 'preview'
        a.ui.small.inline.header(href="/r/#{data.subreddit}/post/#{_id}" class=post_header_class)
            |#{data.ups}
            |#{data.link_title} #{data.title}
        span.ui.small.inline.header(class=post_header_class)
            |!{data.body}
        a.ui.circular.basic.label(href="/r/#{data.subreddit}") #{data.subreddit}
        each seven_tags 
            .ui.small.basic.label #{this}
        +doc_emotion_small        
        .ui.label {{ufrom data.created}}
        if in_dev
            +print_this
            // unless doc_sentiment_label
            //     +call_watson
    .ui.divider                 
                            
template(name='user_doc_item')
    .ui.item
        if is_image
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.centered.rounded.zoomer.inline.small.image.toggle_view(src=data.url)
        else if watson.metadata.image
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.rounded.inline.small.image.zoomer.toggle_view(src=watson.metadata.image)
        else if data.thumbnail
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.rounded.inline.small.image.zoomer(src=data.thumbnail)    
        a.ui.header.zoomer.say_title(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            strong #{data.score}:
            |!{data.link_title} #{data.title}
        .description
            if skv_is 'view_detail' true
                each tags 
                    .ui.tiny.basic.tertiary.button #{this}
            +doc_emotion_small    
            span(title="#{view_count} views")
                i.grey.eye.icon
                |#{view_count}
            if creation_date
                span(title="created {{ufrom creation_date}}")
                    i.grey.clock.icon
                    |{{ufrom creation_date}}
            if last_modified_date
                i.pencil.icon
                |{{ufrom last_modified_date}}
            .ui.basic.label #{data.domain}
            .ui.basic.label #{data.num_comments}
            .ui.basic.label #{data.subreddit}
            // .ui.large.label #{owner.display_name}
            if in_dev
                +print_this
    .spacer
    
    
    
template(name='user_comment')                    
    .call_watson_comment
        .ui.small.inline.header {{data.score}}
        span.metadata 
            span.date {{ufrom data.created}}
            +doc_emotion_small
        .pointer.say(class=post_header_class)
            |{{#markdown}} {{data.body}} {{/markdown}}
        .actions
            each tags 
                +flat_sub_tag_picker
                // .ui.tiny.basic.label #/{this}
            a.author.say(href="/r/#{data.subreddit}") #{data.subreddit}
            if in_dev
                +print_this
