template(name='reddit')
    .ui.stackable.padded.grid
        .twelve.wide.column
            if picked_rtags
                // if skv_is 'nightmode' true
                //     i.moon.circular.link.icon.toggle_nightmode
                // else
                //     i.lightbulb.circular.link.icon.toggle_nightmode
                .ui.icon.large.input
                    if is_loading
                        i.yin.yang.loading.large.icon
                    else
                        i.search.icon
                    input.search_tag(type='text' value=query autofocus='' placeholder="#{post_counter} results")
                    // .ui.label #{this}
            if picked_rtags
                // if many_tags
                //     a#clear_tags.ui.red.invert.icon.button.pick_term
                //         i.remove.icon
                each picked_rtags
                    +unpick_rtag
                each result_rtags
                    // .ui.label #{this}
                    +rtag_picker
            else
                .ui.center.aligned.basic.segment
                    .ui.icon.big.input
                        i.search.large.icon
                        input.search_tag(type='text' placeholder='search' autofocus='')
                        // .ui.label #{this}
                    +search_shortcut tag='math' icon='calculator'
                    +search_shortcut tag='camping' icon='campground'
                    +search_shortcut tag='business' icon='briefcase'
                    +search_shortcut tag='environment' icon='leaf'
                    +search_shortcut tag='money' icon='coins'
                    +search_shortcut tag='cat' icon='cat'
                    +search_shortcut tag='science' icon='flask'
                    +search_shortcut tag='video' icon='video'
                    +search_shortcut tag='gaming' icon='gamepad'
                    +search_shortcut tag='pics' icon='images'
                    +search_shortcut tag='medicine' icon='pills'
                    +search_shortcut tag='chess' icon='chess'
                    +search_shortcut tag='food' icon='food'
                    +search_shortcut tag='beer' icon='beer'
                    +search_shortcut tag='hotel' icon='bed'
                    +search_shortcut tag='winter' icon='snowflake'
                    +search_shortcut tag='photography' icon='camera'
                    +search_shortcut tag='dog' icon='dog'
                    +search_shortcut tag='covid' icon='radiation'
                    +search_shortcut tag='cheese' icon='cheese'
                    +search_shortcut tag='solar' icon='sun'
                    +search_shortcut tag='women' icon='venus'
                    +search_shortcut tag='men' icon='mars'
                    +search_shortcut tag='dungeons & dragons' icon='dice d20'
                    +search_shortcut tag='physics' icon='atom'
                    +search_shortcut tag='law' icon='balance scale'
                    +search_shortcut tag='books' icon='book'
                    +search_shortcut tag='biking' icon='biking'
                    +search_shortcut tag='news' icon='newspaper'
                    +search_shortcut tag='music' icon='music'
                    +search_shortcut tag='skiing' icon='skiing'
                    +search_shortcut tag='pizza' icon='pizza slice'
                    +search_shortcut tag='fish' icon='fish'
                    +search_shortcut tag='gardening' icon='seedling'
                    +search_shortcut tag='bible' icon='bible'
                    +search_shortcut tag='daoism' icon='yin yang'
                    +search_shortcut tag='car' icon='car'
                    +search_shortcut tag='tarot' icon='moon'
            // if skv_is 'view_layout' 'grid'
                // if one_post
                //     .ui.stackable.one.column.grid
                //         each rposts
                //             +post_card
                        
                // // else if two_posts
                // //     .ui.stackable.two.centered.column.grid
                // //         each rposts
                // //             +post_card
                // else
                    // else if three_posts
                // .ui.stackable.three.column.grid.scrolling
                //     each rposts
                //         +post_card
            // img(src=data.banner_img)
            // img(src=banner_background_image)
            img.get_info.shadowed.ui.inline.image(src=logo_url )
            .ui.inline.header.get_info #{data.display_name}
            .ui.icon.input
                i.search.icon
                input.search_reddit(type='text' value=reddit_query)
            each reddit_result_rtags
                // .ui.label #{this}
                +rtag_picker
                // .ui.large.label(title=count) #{name}
            if picked_rtags
                div
                .ui.inline.header #{post_count}
                if skv_is 'sort_direction' 1
                    .ui.icon.compact.basic.tertiary.button.sort_down
                        i.caret.down.icon
                else
                    .ui.icon.compact.basic.tertiary.button.sort_up
                        i.caret.up.icon
                // if skv_is 'view_bounties' 1
                //     .ui.compact.black.button.unview_bounties
                //         i.hand.holding.heart.icon
                //         | bounties
                // else
                //     .ui.compact.basic.tertiary.button.view_bounties
                //         i.hand.holding.heart.icon
                //         | bounties
                // if skv_is 'view_unanswered' 1
                //     .ui.compact.black.button.unview_unanswered
                //         i.checkmark.icon
                //         | unanswered
                // else
                //     .ui.compact.basic.tertiary.button.view_unanswered
                //         i.question.icon
                //         | unanswered
                .ui.icon.button.show_hot(class=hot_class)
                    i.large.fire.icon
                .ui.icon.button.show_best(class=best_class)
                    i.large.certificate.icon
                .ui.icon.compact.large.basic.small.button.show_newest(class=sort_created_class)
                    i.large.clock.icon
                .ui.compact.basic.small.tertiary.button.limit_1
                    |1
                .ui.compact.basic.small.tertiary.button.limit_10
                    |10
                if skv_is 'view_detail' true
                    .ui.black.compact.button.toggle_detail
                        i.list.large.icon
                        |detail
                else
                    .ui.compact.basic.tertiary.button.toggle_detail
                        i.minus.large.icon
                        |simple
                    // i.line.chart.icon
                if skv_is 'reddit_view_layout' 'grid'
                    .ui.compact.circular.large.button.set_grid(class=grid_class) 
                        i.th.large.icon
                        |grid
                else
                    .ui.icon.compact.circular.large.button.set_grid(class=grid_class) 
                        i.th.large.icon
                if skv_is 'reddit_view_layout' 'list'
                    .ui.compact.circular.large.button.set_list(class=list_class)
                        i.list.large.icon
                        |list
                else
                    .ui.icon.compact.circular.large.button.set_list(class=list_class)
                        i.list.large.icon
                .ui.icon.button.skip_left
                    i.chevron.left.icon
                .ui.icon.button.skip_right
                    i.chevron.right.icon
            if skv_is 'view_sidebar' true
                +reddit_leftbar
        if picked_rtags
            .ui.twelve.wide.column                
                .scrolling
                    if rposts
                        if skv_is 'reddit_view_layout' 'grid'
                            .ui.centered.four.stackable.cards 
                                each rposts
                                    +reddit_post_card
                        else if skv_is 'reddit_view_layout' 'list'
                            each rposts
                                +reddit_post_item
                    else
                        .ui.basic.center.aligned.segment
                            i.big.loading.yin.yang.icon

        .four.wide.column
            +rrightbar
   
template(name='reddit_post_card')
    .ui.card
        // .ui.stackable.equal.width.compact.grid
        //     .row
        if embed
            span.rounded.full
                |!{embed}
            div
        else if is_image
            // |image
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.fluid.zoomer.image.toggle_view(src=data.url)
        else if watson.metadata.image.length
            // |metadata
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.inline.zoomer.image.toggle_view(src=watson.metadata.image)
        else if data.thumbnail.length
            |thumbnail
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.inline.zoomer.image.zoomer(src=data.thumbnail)    
        // else if data.thumbnail.length
        //     .column
        //         a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
        //             img.ui.rounded.inline.image.zoomer(src=data.thumbnail)    
        // .column
        .content
            a.ui.inline.small.header.view_post.zoomer(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                strong #{data.ups}:
                |!{data.title} 
                // span.inline.content
            a.ui.basic.label(href="/r/#{subreddit}" class=post_header_class)
                |!{subreddit} 
                // span.inline.content
            |{{ufrom data.created_utc}}
                
            +print_this
   
   
template(name='search_shortcut')
    i.big.link.icon.search_tag.zoomer(class=icon title=tag)
   
   
   
template(name='reddit_post_item')                  
    .ui.ite.seg
        unless skv_is 'view_detail' true
            // .ui.stackable.equal.width.compact.grid
            //     .row
            if embed
                span.rounded.full
                    |!{embed}
                div
            else if is_image
                .column
                    a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                        img.ui.fluid.rounded.image.toggle_view(src=data.url)
            else if watson.metadata.image.length
                .column
                    a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                        img.ui.rounded.inline.image.toggle_view(src=watson.metadata.image)
            else if data.thumbnail.length
                .column
                    a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                        img.ui.rounded.inline.image.zoomer(src=data.thumbnail)    
            // else if data.thumbnail.length
            //     .column
            //         a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            //             img.ui.rounded.inline.image.zoomer(src=data.thumbnail)    
            // .column
            a.ui.inline.header.view_post.zoomer(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                strong #{data.ups}:
                |!{data.title} 
                // span.inline.content
            if watson.analyzed_text
                // .spacer
                a.f11.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                    |{{trunc watson.analyzed_text}}...
            .ui.label 
                i.clock.icon
                |{{ufrom data.created}}
                small ({{long_date data.created}})
            .ui.label(title='domain') #{data.domain}
            // each tags
            //     +flat_pick_rtag
            if in_dev
                +print_this
            // if watson
            //     +doc_emotion_small
            // if skv_is 'view_detail' true
            // a.ui.header.view_post.zoomer(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            //     strong #{data.ups}:
            //     |!{data.title} 
            // span.inline.content
                    
            a.say.goto_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class) !{data.body}
            a.say(href="/r/#{subreddit}/post/#{_id}" class=post_header_class) !{data.html}
            // .spacer
            // if parsed_selftext_html
            //     .ui.segment
            //         |!{parsed_selftext_html}
            // if data.selftext
            //     // .ui.segment
            //     .ui.basic.segment.say
            //         |{{#markdown}} {{data.selftext}} {{/markdown}}
            // else if data.body
            //     div
            //     .ui.segment.say
            //         |{{nl2br data.body}}
            // if data.body_html
            //     div
            //     a.pointer.say(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            //         |!{data.body_html}
            
            each tags
                +flat_pick_rtag
            if watson
                +doc_emotion_small
            a.ui.inline.header(href="/ruser/#{data.author}")
                |#{data.author}
    


        
template(name='unpick_rtag')
    a.unselect_reddit_tag.ui.black.compact.button(href='#')
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.image.superzoom(src=term.watson.metadata.image)    
        strong #{this}


        
template(name='flat_pick_rtag')
    // a.ui.big.image.basic.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    .ui.basic.tertiary.compact.button.zoomer.select_flat_tag(title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.mini.rounded.inline.image.superzoom(src=term.watson.metadata.image )    
        strong #{this}
        // if in_dev
        //     small #{count}



           
                                   
           
                                
                                
                                
template(name='rtag_picker')
    // a.ui.big.image.rounded.label.zoomer.pointer.pick_tag.pick_term(href='#' title="#{count} results" class="#{picker_class} #{thinking_class}")
    .ui.compact.tertiary.button.zoomer.pick_tag.penny.add_global_karma(title="#{count} results" class="#{picker_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.avatar.image.superzoom(src=term.watson.metadata.image )    
        strong #{name}
        // if in_dev
        //     small #{count}
        

        
        
// template(name='flat_rtag_picker')
//     // a.ui.big.image.rounded.label.zoomer.pointer.pick_tag.pick_term(href='#' title="#{count} results" class="#{picker_class} #{thinking_class}")
//     .ui.compact.tiny.button.zoomer.pick_flat_tag.penny.add_global_karma(title="#{count} results" class="#{picker_class} #{thinking_class}")
//         // if term
//         //     if term.watson.metadata.image
//         //         img.ui.mini.rounded.inline.image.superzoom(src=term.watson.metadata.image )    
//         | #{this}
//         // if in_dev
//         //     small #{count}

template(name='reddit_leftbar')
    .four.wide.column.scrolling       
        if location_results.count
            i.big.marker.icon
        each picked_locations
            a.unpick_location.ui.large.compact.button(href='#')
                strong #{this}
        each location_results
            if name
                .ui.tiny.compact.basic.button.pick_location #{name}
        div
        i.big.user.icon
        each picked_authors
            a.unpick_author.ui.large.compact.button(href='#')
                strong #{this}
        each author_results
            if name
                .ui.tiny.compact.basic.button.pick_author #{name}
        div
        i.clock.big.icon
        each picked_times
            a.unpick_time.ui.large.large.compact.button(href='#')
                strong #{this}
        each time_results
            .ui.tiny.compact.basic.button.pick_time #{name}
        .ui.inline.header 
            |#{post_counter}
        // +alpha
        each picked_locations
            a.unpick_location_tag.ui.black.large.compact.button(href='#')
                | #{this}
        if location_tags
            i.big.marker.grey.icon
            each location_tags
                .ui.compact.small.button.zoomer.pick_location_tag(title="#{count} results" class="#{picker_class} #{thinking_class}")
                    | #{name}
        if Locations
            div
            .ui.small.grey.inline.header
                i.marker.grey.icon
                |locations
            each locations
                +rtag_picker
                // .ui.link.label.pick_Location #{name}
        if HealthConditions
            div
            .ui.small.grey.inline.header
                i.doctor.icon
                |health conditions
            each HealthConditions
                +rtag_picker
                // .ui.link.label.pick_healthcondition #{name}
        if Persons
            .spacer
            .ui.small.grey.inline.header
                i.user.icon
                |people
            each Persons
                +rtag_picker
                // .ui.label.pick_person #{name}
        if Organizations
            .spacer
            .ui.small.grey.inline.header
                i.building.icon
                |organizations
            each Organizations
                +rtag_picker
                // .ui.label.pick_organization #{name}
        if Companies
            .ui.small.grey.inline.header
                i.building.icon
                |companies
            each companies
                .ui.label.pick_company #{name}                        


template(name='rfilter_bar')
    if skv_is 'view_sidebar' false
        .ui.icon.button.enable_sidebar
            i.ellipsis.vertical.icon
    else
        .ui.icon.active.button.disable_sidebar
            i.ellipsis.vertical.icon
    // div
    if skv_is 'sort_direction' 1
        .ui.icon.button.sort_down
            i.caret.down.icon
    else
        .ui.icon.button.sort_up
            i.caret.up.icon
    .ui.large.icon.button.sort_created(class=sort_created_class)
        i.clock.icon
    .ui.large.icon.button.sort_points(class=sort_points_class)
        i.thumbs.up.icon
    if skv_is 'view_layout' 'grid'
        .ui.large.icon.black.button.set_grid(class=grid_class) 
            i.th.icon
    else
        .ui.large.icon.button.set_grid(class=grid_class) 
            i.th.icon
    if skv_is 'view_layout' 'list'
        .ui.black.icon.large.button.set_list(class=list_class)
            i.list.icon
    else
        .ui.large.icon.button.set_list(class=list_class)
            i.list.icon
    // if skv_is 'view_detail' true
    //     .ui.black.large.icon.button.toggle_detail
    //         i.list.icon
    // else
    //     .ui.large.icon.button.toggle_detail
    //         i.minus.icon
    //     // i.line.chart.icon
    .ui.icon.button.skip_left
        i.chevron.left.icon
    .ui.icon.button.skip_right
        i.chevron.right.icon
    .ui.icon.button.view_videos(class=video_class)
        i.film.icon
    .ui.icon.button.view_images(class=image_class)
        i.picture.icon
    .ui.icon.button.view_adult(class=adult_class)
        i.fire.icon
    .ui.icon.compact.button.view_joy(class=joy_class)
        i.smile.green.large.outline.icon
    .ui.icon.compact.button.view_anger(class=anger_class)
        i.frown.red.large.outline.icon
    .ui.icon.compact.button.view_fear(class=fear_class)
        i.black.frown.large.outline.icon
    .ui.icon.compact.button.view_disgust(class=disgust_class)
        i.orange.frown.large.outline.icon
    .ui.icon.compact.button.view_sadness(class=sadness_class)
        i.blue.frown.large.outline.icon
    .ui.icon.compact.button.limit_1(class=sadness_class)
        |1
    .ui.icon.compact.button.limit_5(class=sadness_class)
        |5
    .ui.icon.compact.button.limit_10(class=sadness_class)
        |10
    .ui.icon.compact.button.limit_20(class=sadness_class)
        |20
    .ui.icon.button.view_commented
        i.chat.icon            
        .ui.hidden.divider




template(name='rrightbar')
    if location_results.count
        i.big.marker.icon
    each picked_locations
        a.unpick_location.ui.large.button(href='#')
            strong #{this}
    each location_results
        if name
            .ui.tiny.button.pick_location #{name}
    div
    i.big.user.icon
    each picked_authors
        a.unpick_author.ui.large.button(href='#')
            strong #{this}
    each author_results
        if name
            .ui.tiny.button.pick_author #{name}
    div
    i.clock.big.icon
    each picked_times
        a.unpick_time.ui.large.large.button(href='#')
            strong #{this}
    each time_results
        .ui.tiny.button.pick_time #{name}
    // +alpha
    each picked_locations
        a.unpick_location_tag.ui.black.large.button(href='#')
            | #{this}
    if location_tags
        i.big.marker.grey.icon
        each location_tags
            .ui.small.button.zoomer.pick_location_tag(title="#{count} results" class="#{picker_class} #{thinking_class}")
                | #{name}
                
    img.ui.inline.image(src=data.header_img)
    .ui.inline.header.pull_latest #{data.title}
    // +alpha
    .ui.inline.small.header 
        i.reddit.icon
        |subreddits
    each reddit_subreddits
        .ui.compact.basic.button.select_subreddit(class=subreddit_selector_class)
            |#{name} 
            small #{count}
    .ui.inline.small.header domains
    each reddit_domain_tags
        .ui.compact.basic.button.select_domain(class=domain_selector_class)
            |#{name} 
            small #{count}
    i.clock.icon            
    each reddit_time_tags
        .ui.compact.basic.button.select_time_tag(class=domain_selector_class)
            |#{name} 
            small #{count}
    if in_dev
        +print_this
        // div
    with emotion_avg
        // .ui.list
        //     .item {{ to_percent avg_sent_score}}% sentiment
        //     .item {{ to_percent avg_joy_score}}% joy
        //     .item {{ to_percent avg_anger_score}}% anger
        //     .item {{ to_percent avg_sadness_score}}% sad
        //     .item {{ to_percent avg_disgust_score}}% disgust
        //     .item {{ to_percent avg_fear_score}}% fear
        // if is_positive
        //     span.say.ui.green.text(class="{{calculated_size doc_sentiment_score}}") {{ to_percent doc_sentiment_score }}% positive
        //         |&nbsp;
        //     div.rounded(style="height:5px;width:{{to_percent doc_sentiment_score}}%;background-color:green" title="{{to_percent doc_sentiment_score}}% #{doc_sentiment_label}")
        // else
        //     span.say.ui.red.text(class="{{calculated_size doc_sentiment_score}}") {{ to_percent doc_sentiment_score }}%  negative
        //         |&nbsp;
        //     div.rounded(style="height:5px;width:{{abs_percent doc_sentiment_score}}%;background-color:red" title="{{abs_percent doc_sentiment_score}}% #{doc_sentiment_label}")
        span.say.ui.green.text(class="{{calculated_size avg_sent_score}}") {{ to_percent avg_sent_score }}% sentiment 
            |&nbsp;
        div.rounded(style="height:5px;width:{{to_percent avg_sent_score}}%;background-color:green" title="{{to_percent avg_sent_score}}% joy")
        span.say.ui.green.text(class="{{calculated_size avg_joy_score}}") {{ to_percent avg_joy_score }}% joy 
            |&nbsp;
        div.rounded(style="height:5px;width:{{to_percent avg_joy_score}}%;background-color:green" title="{{to_percent avg_joy_score}}% joy")
        //- if above_50 'avg_sadness_score'
            //- .spacer
        span.say.ui.blue.text(class="{{calculated_size avg_sadness_score}}") {{ to_percent avg_sadness_score}}% sad 
            |&nbsp;
        div.rounded(style="height:5px;width:{{to_percent avg_sadness_score}}%;background-color:blue" title="{{to_percent avg_sadness_score}}% sad")
        //- if above_50 'avg_fear_score'
            //- .spacer
        span.say.ui.grey.text(class="{{calculated_size avg_fear_score}}") {{ to_percent avg_fear_score }}% fear 
            |&nbsp;
        div.rounded(style="height:5px;width:{{to_percent avg_fear_score}}%;background-color:grey" title="{{to_percent avg_fear_score}}% fear")
        //- if above_50 'avg_disgust_score'
            //- .spacer
        span.say.ui.orange.text(class="{{calculated_size avg_disgust_score}}") {{ to_percent avg_disgust_score }}% disgust 
            |&nbsp;
        div.rounded(style="height:5px;width:{{to_percent avg_disgust_score}}%;background-color:orange" title="{{to_percent avg_disgust_score}}% disgust")
        //- if above_50 'avg_anger_score'
            //- .spacer
        span.say.ui.red.text(class="{{calculated_size avg_anger_score}}") {{ to_percent avg_anger_score }}% anger 
            |&nbsp;
        div.rounded(style="height:5px;width:{{to_percent avg_anger_score}}%;background-color:red" title="{{to_percent avg_anger_score}}% anger")
    
    .ui.list.mobile.hidden
        // .item.seg.say !{data.public_description}
        // .item.seg.say 
        //     |{{#markdown}} !{data.description} {{/markdown}}
        // .item 
        //     i.grey.lightning.icon
        //     |#{active_user_count} activeusers
        // .item 
        //     i.grey.users.icon
        //     |#{subscribers} subscribers
        // // .item 
        // //     strong #{audience}
        // a.item(href=url target="_window")
        //     |#{url}
        //     i.external.icon
        // .item
        //     |#{advertiser_category} ad category
        // .item #{dao_views} dao views    
        // .item created {{ufrom created_utc}}
        // .item state: #{reddit_state}
        // // .item #{high_resolution_icon_url} high_resolution_icon_url
        // // .item #{favicon_url} favicon_url
        // // .item #{api_reddit_parameter} api
        // .item #{reddit_type} reddit_type
        // .item main emotion: #{main_emotion}
        // .item 
        //     i.grey.thumbs.up.outline.icon
        //     |#{total_votes} votes
        // .item #{comment_count} comments
