template(name='subreddit')
    unless subreddit_doc
        .ui.basic.center.aligned.segment
            i.massive.fire.link.grey.icon.get_info.shadowed2
            .ui.big.grey.header #{current_sub}
    with subreddit_doc
        .ui.stackable.grid(style="background-image:url(#{data.banner_img}); margin-top:0px;, background-size:cover;, background-repeat: no-repeat; min-width: 100%; ")
            .twelve.wide.column.seg
                // img(src=data.banner_img)
                // img(src=banner_background_image)
                a.ui.basic.compact.icon.button(href="/")
                    i.chevron.left.grey.icon
                    i.search.icon
                    // img.ui.mini.inline.image(src=icon_img)
                img.get_info.shadowed.ui.inline.image(src=logo_url )
                .ui.inline.header.get_info #{data.display_name}
                if picked_sub_tags
                    // if many_tags
                    //     a#clear_tags.ui.black.invert.icon.compact.button.select_term
                    //         i.remove.icon
                    each picked_sub_tags
                        +sub_unpick_tag
                .ui.icon.input
                    i.search.icon
                    input.search_subreddit(type='text')
                each subreddit_result_tags
                    // .ui.label #{this}
                    +sub_tag_picker
                    // .ui.label(title=count) #{name}
                div
                .ui.inline.header #{post_count}
                +sort_direction_button
                +limit_button value=1
                +limit_button value=10
                +limit_button value=20
                +view_layout_button label='grid' icon='th'
                +view_layout_button label='list' icon='list'
                +sort_button l='upvotes' i='thumbs up outline' key='data.ups'
                +sort_button l='comments' i='chat outline' key='data.comment_count'
                +sort_button l='joy' i='smile' c='green' key='rep_joy'
                +sort_button l='anger' i='frown' c='red' key='rep_anger'
                +sort_button l='sadness' i='frown' c='blue' key='rep_sadness'
                +sort_button l='disgust' i='frown' c='orange' key='rep_disgust'
                +sort_button l='fear' i='frown' c='grey' key='rep_fear'
                    
                .scrolling
                    if sub_docs
                        if skv_is 'subreddit_view_layout' 'grid'
                            .ui.stackable.three.column.grid 
                                each sub_docs
                                    +sub_post_card
                        else if skv_is 'subreddit_view_layout' 'list'
                            each sub_docs
                                +subreddit_doc_item
                    else
                        .ui.basic.center.aligned.segment
                            i.big.loading.yin.yang.icon
            .four.wide.column.scrolling.seg
                img.ui.inline.image(src=data.header_img)
                .ui.inline.header.pull_latest #{data.title}
                // +alpha
                div
                .ui.inline.small.header
                    i.globe.icon
                    |domains
                each subreddit_domain_tags
                    .ui.basic.label.select_domain(class=domain_selector_class)
                        |#{name} 
                        small #{count}
                div
                .ui.inline.header
                    i.clock.icon    
                    |time tags
                each subreddit_time_tags
                    .ui.basic.label.select_time_tag(class=domain_selector_class)
                        |#{name} 
                        small #{count}
                // .ui.inline.header.pull_latest #{display_name}
                if in_dev
                    +print_this
                    // div
                +subreddit_best
                +subreddit_newest
                with emotion_avg
                    if is_positive
                        span.say.ui.green.text(class="{{calculated_size doc_sentiment_score}}") {{ to_percent doc_sentiment_score }}% positive
                            |&nbsp;
                        div.rounded(style="height:5px;width:{{to_percent doc_sentiment_score}}%;background-color:green" title="{{to_percent doc_sentiment_score}}% #{doc_sentiment_label}")
                    else
                        span.say.ui.red.text(class="{{calculated_size doc_sentiment_score}}") {{ to_percent doc_sentiment_score }}%  negative
                            |&nbsp;
                    //     div.rounded(style="height:5px;width:{{abs_percent doc_sentiment_score}}%;background-color:red" title="{{abs_percent doc_sentiment_score}}% #{doc_sentiment_label}")
                    span.say.ui.green.text(class="{{calculated_size avg_sent_score}}") {{ to_percent avg_sent_score }}% sentiment 
                        |&nbsp;
                    div.rounded(style="height:5px;width:{{to_percent avg_sent_score}}%;background-color:green" title="{{to_percent avg_sent_score}}% joy")
                    span.say.ui.green.text(class="{{calculated_size avg_joy_score}}") {{ to_percent avg_joy_score }}% joy 
                        |&nbsp;
                    div.rounded(style="height:5px;width:{{to_percent avg_joy_score}}%;background-color:green" title="{{to_percent avg_joy_score}}% joy")
                    //- if above_50 'avg_sadness_score'
                        //- .spacer
                    span.say.ui.blue.text(class="{{calculated_size avg_sadness_score}}") {{ to_percent avg_sadness_score}}% sad 
                        |&nbsp;
                    div.rounded(style="height:5px;width:{{to_percent avg_sadness_score}}%;background-color:blue" title="{{to_percent avg_sadness_score}}% sad")
                    //- if above_50 'avg_fear_score'
                        //- .spacer
                    span.say.ui.grey.text(class="{{calculated_size avg_fear_score}}") {{ to_percent avg_fear_score }}% fear 
                        |&nbsp;
                    div.rounded(style="height:5px;width:{{to_percent avg_fear_score}}%;background-color:grey" title="{{to_percent avg_fear_score}}% fear")
                    //- if above_50 'avg_disgust_score'
                        //- .spacer
                    span.say.ui.orange.text(class="{{calculated_size avg_disgust_score}}") {{ to_percent avg_disgust_score }}% disgust 
                        |&nbsp;
                    div.rounded(style="height:5px;width:{{to_percent avg_disgust_score}}%;background-color:orange" title="{{to_percent avg_disgust_score}}% disgust")
                    //- if above_50 'avg_anger_score'
                        //- .spacer
                    span.say.ui.red.text(class="{{calculated_size avg_anger_score}}") {{ to_percent avg_anger_score }}% anger 
                        |&nbsp;
                    div.rounded(style="height:5px;width:{{to_percent avg_anger_score}}%;background-color:red" title="{{to_percent avg_anger_score}}% anger")
                .smallscroll
                    .ui.list.mobile.hidden
                        .item.seg.say !{data.public_description}
                        .item.seg.say 
                            |{{#markdown}} !{data.description} {{/markdown}}
                        .item 
                            i.grey.lightning.icon
                            |#{active_user_count} activeusers
                        .item 
                            i.grey.users.icon
                            |#{subscribers} subscribers
                        // .item 
                        //     strong #{audience}
                        a.item(href=url target="_window")
                            |#{url}
                            i.external.icon
                        .item
                            |#{advertiser_category} ad category
                        .item #{dao_views} dao views    
                        .item created {{ufrom created_utc}}
                        .item state: #{subreddit_state}
                        // .item #{high_resolution_icon_url} high_resolution_icon_url
                        // .item #{favicon_url} favicon_url
                        // .item #{api_subreddit_parameter} api
                        .item #{subreddit_type} subreddit_type
                        .item main emotion: #{main_emotion}
                        .item 
                            i.grey.thumbs.up.outline.icon
                            |#{total_votes} votes
                        .item #{comment_count} comments
       
template(name='sort_direction_button')       
   if skv_is 'sort_direction' 1
        .ui.icon.basic.label.sort_down
            i.caret.down.icon
    else
        .ui.icon.basic.label.sort_up
            i.caret.up.icon

       
template(name='subreddit_best')
    .ui.small.header 
        i.thumbs.up.icon
        |best
    .ui.link.selection.list 
        each sub_best_docs
            a.item(href="/r/#{subreddit}/post/#{_id}") #{data.ups}: #{data.title}
                |{{ufrom data.created}}
                |#{data.num_comments}
                i.grey.chat.outline.icon
                // +print_this
       
       
template(name='subreddit_newest')
    .ui.small.header 
        i.clock.icon
        |newest
    .ui.link.selection.list 
        each sub_newest_docs
            a.item(href="/r/#{subreddit}/post/#{_id}") #{data.ups}: #{data.title}
                |{{ufrom data.created}}
                |#{data.num_comments}
                i.grey.chat.outline.icon
                // +print_this
       
       
   
template(name='sub_post_card')
    .ui.column.smallscroll
        // .ui.stackable.equal.width.compact.grid
        //     .row
        if embed
            span.rounded.view_post.full
                |!{embed}
            div
        else if is_image
            // a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            img.ui.image.toggle_view.view_post.zoomer.pointer(src=data.url)
        else if watson.metadata.image.length
            // a.view_post.zoomer.pointer(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            img.ui.image.toggle_view(src=watson.metadata.image)
        else if data.thumbnail.length
            // a.view_post.zoomer.pointer(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            img.ui.image.view_post.zoomer.pointer(src=data.thumbnail)    
        // else if data.thumbnail.length
        //     .column
        //         a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
        //             img.ui.rounded.inline.image.zoomer(src=data.thumbnail)    
        .content
            a.ui.small.header.view_post.zoomer(href="/r/#{data.subreddit}/post/#{_id}" class=post_header_class)
                |!{data.title} 
            | #{data.ups}
            i.thumbs.up.outline.grey.icon
            | #{data.num_comments}
            i.comment.outline.grey.icon
            i.clock.icon
            each time_tags
                .ui.tiny.label #{this}
            a.ui.label(href="/user/#{data.author}")
                |#{data.author}
                // span.inline.content
                // span.inline.content
            +print_this
            // .ui.label 
            i.clock.icon
            |{{ufrom data.created}}
            small ({{long_date data.created}})
            
   
template(name='subreddit_doc_item')                  
    .ui.ite.seg
        unless skv_is 'view_detail' true
            // .ui.stackable.equal.width.compact.grid
            //     .row
            if embed
                span.rounded.full
                    |!{embed}
                div
            else if is_image
                .column
                    a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                        img.ui.fluid.rounded.image.toggle_view(src=data.url)
            else if watson.metadata.image.length
                .column
                    a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                        img.ui.rounded.inline.image.toggle_view(src=watson.metadata.image)
            else if data.thumbnail.length
                .column
                    a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                        img.ui.rounded.inline.image.zoomer(src=data.thumbnail)    
            // else if data.thumbnail.length
            //     .column
            //         a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            //             img.ui.rounded.inline.image.zoomer(src=data.thumbnail)    
            // .column
            a.ui.inline.header.view_post.zoomer(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                strong #{data.ups}:
                |!{data.title} 
                // span.inline.content
            if watson.analyzed_text
                // .spacer
                a.f11.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                    |{{trunc watson.analyzed_text}}...
            .ui.label 
                i.clock.icon
                |{{ufrom data.created}}
                small ({{long_date data.created}})
            .ui.label(title='domain') #{data.domain}
            // each tags
            //     +flat_sub_tag_picker
            if in_dev
                +print_this
            // if watson
            //     +doc_emotion_small
            // if skv_is 'view_detail' true
            // a.ui.header.view_post.zoomer(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            //     strong #{data.ups}:
            //     |!{data.title} 
            // span.inline.content
                    
            a.say.goto_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class) !{data.body}
            a.say(href="/r/#{subreddit}/post/#{_id}" class=post_header_class) !{data.html}
            // .spacer
            // if parsed_selftext_html
            //     .ui.segment
            //         |!{parsed_selftext_html}
            // if data.selftext
            //     // .ui.segment
            //     .ui.basic.segment.say
            //         |{{#markdown}} {{data.selftext}} {{/markdown}}
            // else if data.body
            //     div
            //     .ui.segment.say
            //         |{{nl2br data.body}}
            // if data.body_html
            //     div
            //     a.pointer.say(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            //         |!{data.body_html}
            
            each tags
                +flat_sub_tag_picker
            if watson
                +doc_emotion_small
            a.ui.inline.header(href="/user/#{data.author}")
                |#{data.author}
    


template(name='sub_tag_picker')
    // a.ui.big.image.basic.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    a.ui.basic.image.label.select_sub_tag(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.image.superzoom(src=term.watson.metadata.image )    
        strong #{name}
        // if in_dev
        //     small #{count}
        
template(name='sub_unpick_tag')
    a.unselect_sub_tag.ui.black.image.label(href='#')
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.image.superzoom(src=term.watson.metadata.image)    
        strong #{this}

        
        
template(name='flat_sub_tag_picker')
    // a.ui.big.image.basic.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    a.ui.basic.image.label.zoomer.select_flat_tag(title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.image.superzoom(src=term.watson.metadata.image )    
        strong #{this}
        // if in_dev
        //     small #{count}
template(name='flat_sub_user_tag_selector')
    // a.ui.big.image.basic.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    a.ui.basic.compact.button.zoomer.select_flat_tag(title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.mini.rounded.inline.image.superzoom(src=term.watson.metadata.image )    
        strong #{this}
        // if in_dev
        //     small #{count}