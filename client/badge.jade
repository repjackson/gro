template(name='stack_badges')
    .ui.stackable.padded.grid
        .four.wide.column.scrolling
            .ui.header
                i.certificate.icon
                |badges
            +stack_badge_cloud
        .twelve.wide.column
            .ui.centered.cards.scrolling
                each badges
                    a.ui.card.select_user(href="/site/#{site}/user/#{user.user_id}")
                        .content
                            a.ui.header #{name}
                            .description
                                |#{site}
                                with user
                                    img.ui.avatar.image(src=profile_image class=currentUser.invert_class)
                                    |#{display_name}
                                    small #{reputation}

template(name='stack_badge_cloud')
    // #cloud.ui.center.aligned.fluid.segment
        // if currentUser
        //     .ui.icon.input
        //         i.plus.icon
        //         input#quick_add(type='text')
        //     // #add.ui.circular.button
        //     //     i.plus.icon
        //     //     | Full Add
        // .ui.hidden.divider
        // .ui.left.icon.input
        //     i.search.icon
        //     input(type='text')
    if selected_badges
        #clear_badges.ui.primary.icon.compact.circular.button
            i.remove.icon
        each selected_badges
            .unselect_badge.ui.primary.compact.circular.button
                strong !{this}
    each all_badges
        .ui.compact.circular.button.select_badge(class=cloud_badge_class) !{this.name}
            small #{this.count}
    .ui.grey.inline.header
        i.globe.icon
        |site
    if selected_user_site
        .unselect_site.ui.primary.compact.circular.button
            strong !{selected_user_site}
    each all_sites
        .ui.compact.basic.circular.zoomer.button.select_site(class=cloud_site_class) !{this.name}
    .spacer
    .ui.grey.inline.header 
        i.marker.icon
        |location
    if selected_user_location
        .unselect_location.ui.primary.compact.circular.button
            strong !{selected_user_location}
    each all_locations
        .ui.compact.basic.circular.button.select_location(class=cloud_location_class) !{this.name}
            // small #{this.count}
                                
template(name='stack_badge')
    with current_doc
        .ui.stackable.padded.grid
            .middle.aligned.row
                .four.wide.column.scrolling
                    a.ui.large.fluid.basic.circular.button.say_site(href="/site/#{site}") 
                        i.chevron.left.icon
                        if watson.metadata.image
                            img.ui.invert.mini.inline.image(src=watson.metadata.image)    
                        | #{site}
                    with owner
                        a.ui.basic.segment.zoomer.pointer.say_name(href="/site/#{current_doc.site}/user/#{user_id}")
                            img.ui.rounded.image(src=profile_image)
                            .ui.header #{display_name}
                                small #{reputation}
                                // .ui.basic.label id #{user_id}
                                // .ui.basic.label type #{user_type}
                                // a.ui.circular.icon.button(href=link)
                                //     i.large.external.icon
                        
                    +doc_emotion
                    +watson_full
                    // i.big.refresh.circular.link.icon.get_question
                    // i.big.exclamation.circular.link.icon.get_answers
                    // +skve k='stack_section' v='main' l='content' i='content' 
                    unless watson
                        .ui.big.fluid.button.call_watson
                            i.large.brain.icon
                            |analyze
                    each badges 
                        .ui.basic.pointer.circular.tertiary.button.add_stack_badge.speak_this.zoomer #{this}
                    a.ui.circular.icon.button(href=link target='_window' title=link)
                        // |#{link}
                        i.external.large.icon
                    if is_answered
                        .ui.basic.inverted.green.large.tertiary.button
                            i.green.checkmark.icon
                            |answered
                    else
                        .ui.basic.tertiary.button
                            // i..icon
                            |unanswered
                    .ui.large.basic.tertiary.button 
                        i.eye.icon
                        |#{view_count}
                    .ui.list
                        .item.zoomer #{view_count} views
                        .item.zoomer id #{_id}
                        .item.zoomer date protected {{ufrom protected_date}}
                        .item.zoomer accepted answer id #{accepted_answer_id}
                        .item.zoomer #{answer_count} answers
                        .item.zoomer score #{score}
                        .item.zoomer qid #{question_id}
                        .item.zoomer active {{ufrom last_activity_date}}
                        .item.zoomer created {{ufrom creation_date}}
                        .item.zoomer imported #{_when}
                        .item.zoomer license #{content_license}
                        
                    // +bookmark_button
                    // +voting
                    +print_this
                    +doc_sentiment
                    
                .twelve.wide.column.scrolling
                    .ui.header.say_title.get_question
                        |!{title}
                    // div(class=currentUser.invert_class)
                    +skve k='stack_section' v='main' l='main' i='content' 
                    
                    if skv_is 'stack_section' 'main'
                        .ui.basic.segment.speak_this
                            .f11.speak_body.zoomer !{body}
                        .ui.small.grey.header.get_question_comments
                            i.chat.outline.icon
                            // |comments
                        each question_comments
                            .ui.basic.segment
                                if is_accepted 
                                    .ui.green.label.zoomer
                                        |accepted
                                // div(class=currentUser.invert_class)
                                .f11.speak_body.zoomer !{body}
                                with owner
                                    .ui.divider
                                    i.chat.icon
                                    a.ui.inline.header.say_name.zoomer(href="/site/#{current_doc.site}/user/#{user_id}")
                                        img.ui.avatar.invert.image(src=profile_image)
                                        |!{display_name}
                                        |#{reputation}
                                    .ui.basic.small.label #{user_id}
                                    .ui.basic.small.label #{user_type}
                                    .ui.basic.small.label #{accept_rate}
                                    a(href=link) #{link}
                                
                                small #{content_license}
                                // +voting
                                // +comments
                        
                        
                        each question_answers
                            .ui.basic.segment(class=answer_class)
                                if is_accepted 
                                    .ui.green.corner.attached.label.zoomer
                                        i.checkmark.icon
                                // div(class=currentUser.invert_class)
                                .f11.speak_body.zoomer !{body}
                                .ui.divider
                                .ui.horizontal.list
                                    .item 
                                        small active
                                        |{{ufrom last_activity_date}}
                                    .item
                                        small edited
                                        |{{ufrom last_edit_date}}
                                    .item
                                        small created
                                        |{{ufrom creation_date}}
    
                                with owner
                                    div
                                    a.ui.header.say_name.zoomer(href="/site/#{current_doc.site}/user/#{user_id}")
                                        img.ui.avatar.invert.image(src=profile_image)
                                        |!{display_name}
                                    |#{reputation}
                                    |#{user_id}
                                    |#{user_type}
                                    |#{accept_rate}
                                    a.ui.icon.button(href=link)
                                        i.external.icon
                                |#{content_license}
                                // +voting
                                // +comments
                                if in_dev 
                                    +remove_button
                    +skve k='stack_section' v='watson' l='watson' i='brain' 
                    if tone
                        +skve k='stack_section' v='tone' l='tone' i='user' 
                    +skve k='stack_section' v='embed' l='embed' i='layout' 
                    if skv_is 'stack_section' 'tone'
                        if watson 
                            if tone
                                +tone
                        // else if skv_is 'stack_section' 'main'
                    else if skv_is 'stack_section' 'watson'
                        if watson 
                            .ui.fluid.button.call_tone 
                                i.smile.icon
                                |analyze tone
                            +watson_view
                            +watson_full
                    +comments
                    // .three.wide.column
                    // .ui.grey.small.header.get_linked 
                    //     i.linkify.icon
                    //     |linked
                    // each linked_question_ids
                    //     .ui.header #{this}
                    // each linked_questions
                    //     .ui.header hi #{title}
                    // .ui.grey.small.header.get_related
                    //     i.fork.icon
                    //     |related
                    // each related_question_ids
                    //     .ui.header #{this}
                    // each related_questions
                    //     .ui.header hi #{title}
        
            
                    
