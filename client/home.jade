template(name='subs')
    .ui.stackable.padded.grid
        .row
            unless picked_tags
                .sixteen.wide.center.aligned.column
                    .ui.inline.header 
                        i.reddit.icon
                        |search subreddits
                    .ui.icon.input
                        i.search.icon
                        input.search_subreddits(type='text' placeholder=sub_count autofocus='')
                    each subreddit_tags
                        +tag_picker
                        // .ui.label #{this}
                        // a.zoomer.ui.compact.circular.button.pick_sub_tag(title=count) #{name}
                    if skv_is 'nsfw' false
                        +skve k='nsfw' v=true l='safe'
                    else if skv_is 'nsfw' true
                        +skve k='nsfw' v=false l='nsfw'
            if picked_tags
                .sixteen.wide.middle.aligned.column
                    // .ui.inline.header #{sub_count}
                    // i.reddit.big.icon
                    // .ui.inline.header.search_subs
                    //     |#{subreddit_docs.count} subs
                    // .smallscroll
                    if picked_tags
                        // if many_tags
                        //     a#clear_tags.ui.black.invert.icon.compact.button.select_term
                        //         i.remove.icon
                        each picked_tags
                            +unpick_tag
                            // .ui.black.circular.button.unpick_sub_tag #{this}
                    .ui.icon.input
                        i.search.icon
                        input.search_subreddits(type='text' placeholder=sub_count)
                    each subreddit_tags
                        +tag_picker
                        // .ui.label #{this}
                        // a.zoomer.ui.compact.small.circular.button.pick_sub_tag(title=count) #{name}
                    // .sixteen.wide.column
                    // +skve k='view_sub_detail' v=true l='detail' i='chevron up'
                    // +skve k='view_sub_detail' v=false l='simple' i='chevron down'
                    // +skve k='sort_subs' v='data.subscribers' l='subscribers' i='users'
                    // +skve k='sort_subs' v='data.title' l='name' i='header'
                    // +skve k='subs_limit' v=10 l='10'
                    // +skve k='subs_limit' v=20 l='20'
                    // +skve k='subs_limit' v=50 l='50'
                    
                    // if can_skip_left
                    //     .ui.icon.button.skip_left
                    //         i.chevron.left.icon
                    // // if can_skip_right
                    // .ui.icon.button.skip_right
                    //     i.chevron.right.icon 
                    if skv_is 'nsfw' false
                        +skve k='nsfw' v=true l='safe'
                    else if skv_is 'nsfw' true
                        +skve k='nsfw' v=false l='nsfw'
                    .scrolling
                        unless subreddit_docs.count
                            .ui.center.aligned.basic.segment
                                i.massive.reddit.grey.loading.icon
                        // .ui.centered.five.stackable.cards
                        .ui.centered.five.column.padded.grid
                            each subreddit_docs
                                +subreddit_doc
                                // .spacer


template(name='subreddit_doc')
    // a.card.rounded.zoomer(style="background-image:url(#{data.banner_img});, background-size:cover; background-repeat: no-repeat; min-width: 100%;" href="https://www.reddit.com/r/#{data.display_name}" target="_window")
    a.column.rounded.zoomer(style="background-image:url(#{data.banner_img});, background-size:cover; background-repeat: no-repeat;" href="https://www.reddit.com/r/#{data.display_name}" target="_window")
        // a.ui.tiny.image.goto_sub(href="/r/#{data.display_name}")
        .ui.image.goto_sub.zoomer
            img.ui.zoomer.rounded.image(src=data.icon_img)
        .content.seg.zoomer
            .ui.zoomer.header.goto_sub(style="color:#{data.primary_color}")
                // img.ui.zoomer.image(src=data.header_img)
                | !{data.title} 
                small !{data.display_name}
            // a.ui.small.grey.header.goto_sub(href="/r/#{data.display_name}" target="_window")
            //     | !{data.header_title}
            // if skv_is 'view_sub_detail' true
            // span.description !{data.public_description_html}
            a.description.zoomer(style="color:#{data.primary_color}") !{data.public_description}
            // |created {{ufrom data.created}}
            // span.say
            //     // i.money.icon
            //     |#{data.advertiser_category}
            // .ui.label(title='active users')
            //     i.users.icon
            //     |#{data.accounts_active}
            // .ui.label(title='subscribers')
            //     i.edit.icon
            //     |#{data.subscribers}
            // if in_dev
            //     each tags
            //         .ui.small.label.goto_sub #{this}
            //     +print_this
            //     +remove_button


template(name='unpick_tag')
    a.unpick.ui.black.image.large.circular.label.button(href='#')
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.image.superzoom(src=term.watson.metadata.image)    
        strong #{this}


template(name='tag_picker')
    // a.ui.big.image.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    a.ui.image.large.circular.basic.label.zoomer.pick_tag.invert(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.mini.rounded.inline.image.superzoom(src=term.watson.metadata.image )    
        strong #{name}
        // if in_dev
        //     small #{count}
        
template(name='subs_unselect_tag')
    a.unselect_subs_tag.ui.black.compact.button(href='#')
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.image.superzoom(src=term.watson.metadata.image)    
        strong #{this}
        
template(name='flat_subs_tag_selector')
    // a.ui.big.image.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    .ui.tertiary.compact.button.zoomer.select_flat_tag(title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.mini.rounded.inline.image.superzoom(src=term.watson.metadata.image )    
        strong #{this}
        // if in_dev
        //     small #{count}
