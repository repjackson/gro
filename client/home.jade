template(name='home')
    .ui.stackable.grid
        .six.wide.column
            .ui.icon.circular.basic.button.add_fam_post
                i.plus.icon
            .ui.inline.header #{counter}
            // .ui.input
            //     input.add_fam_post(type='text' placeholder='add')
            if selected_home_tags
                // if many_tags
                //     a#clear_tags.ui.black.invert.icon.compact.button.select_term
                //         i.remove.icon
                each selected_home_tags
                    +home_unselect_tag
            .ui.icon.input
                i.search.icon
                input.search_home_tag(type='text' value=home_query)
            each home_result_tags
                // .ui.label #{this}
                +home_tag_selector
            div
            i.marker.big.grey.icon
                // |where
            each selected_location_tags
                .ui.circular.large.black.button.unselect_location_tag
                    |#{this}
            each home_location_tags
                .ui.compact.basic.tertiary.button.select_location_tag(class=domain_selector_class)
                    |#{name} 
                    // small #{count}
            div
            i.clock.big.grey.icon
                // |when
            each selected_time_tags
                .ui.circular.large.black.button.unselect_time_tag
                    |#{this}
            each home_time_tags
                .ui.compact.basic.tertiary.button.select_time_tag(class=domain_selector_class)
                    |#{name} 
                    small #{count}
            .ui.inline.header(href='home views') #{stats.home_views}
                i.eye.grey.icon
            // each selected_home_People
            //     .ui.button.unselect_home_People #{this}
            // each home_People_tags
            //     .ui.compact.basic.button.select_domain(class=domain_selector_class)
            //         |#{name} 
            //         small #{count}
            .ui.inline.header #{post_count}
            .ui.header 
                i.users.icon
                |groups
            .ui.cards
                each groups
                    .ui.card
                        .content
                            a.ui.header(href="/group/#{_id}") #{title}
                            .ui.basic.label 
                                i.clock.icon
                                |#{section}
                            .ui.basic.label 
                                i.user.icon
                                |#{professor}
            
        .ten.wide.column
            // if skv_is 'home_sort_direction' 1
            //     .ui.icon.compact.basic.tertiary.button.sort_down
            //         i.caret.down.icon
            // else
            //     .ui.icon.compact.basic.tertiary.button.sort_up
            //         i.caret.up.icon
            // .ui.icon.button.sort_retweet(class=retweet_class)
            //     i.refresh.icon
            // .ui.icon.button.sort_favorite(class=fav_class)
            //     i.favorite.icon
            // .ui.icon.compact.basic.small.button.sort_date(class=date_class)
            //     i.clock.icon
            // // .ui.compact.basic.small.tertiary.button.limit_1
            // //     |1
            // // .ui.compact.basic.small.tertiary.button.limit_10
            // //     |10
            // .ui.icon.circular.basic.button.skip_left
            //     i.chevron.left.icon
            // .ui.icon.circular.basic.button.skip_right
            //     i.chevron.right.icon
            // |#{skip_value}
            // .ui.small.input(title='skip number')
            //     input.skip_number(type='number')
            // img.ui.inline.image(src=data.header_img)
            // .ui.inline.header.pull_latest #{data.title}
            // +alpha
            // div
            // .scrolling
            //     if home_docs
            //         .ui.four.stackable.cards 
            //             each home_docs
            //                 +home_card
            //     else
            //         .ui.basic.center.aligned.segment
            //             i.big.loading.yin.yang.icon
        
            // .ui.header photos
            .ui.stackable.three.column.grid.scrolling
                each tribe_posts
                    +home_card

   
template(name='home_card')
    .ui.column
        a(href="/p/#{_id}")
            img.ui.rounded.image.say_title(src="{{c.url image_id }}" class=currentUser.invert_class)
        .content
            a.ui.small.header.say_title(href="/p/#{_id}") #{title}
            // .f12(class=post_header_class) !{text}??
            // +array_view key='tags' label='tags' direct=true
            // +array_view key='location_tags' direct=true
            // +array_view key='time_tags' direct=true
            // +array_view key='people_tags' direct=true
            a.smallscroll(href="/p/#{_id}")
                |!{content}         
            +youtube_view key='youtube_id' label='youtube id' direct=true
                
            each tags
                +flat_home_tag_selector
                // a.ui.label.select_home_tag #{this}
            each home_time_tags
                .ui.small.basic.label.set_time_tag #{this}
            .ui.fluid.icon.transparent.input
                i.chat.outline.icon
                input.add_comment(type='text')
            each comments
                .ui.small.header #{body}
template(name='home_tag_selector')
    // a.ui.big.image.basic.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    .ui.basic.compact.tertiary.small.button.zoomer.select_tag(title="#{count} results" class="#{selector_class} #{thinking_class}")
        // if term
        //     if term.watson.metadata.image
        //         img.ui.mini.inline.image.superzoom(src=term.watson.metadata.image )    
        strong #{name}
        // if in_dev
        //     small #{count}
        
template(name='home_unselect_tag')
    a.unselect_home_tag.ui.large.compact.active.button(href='#')
        // if term
        //     if term.watson.metadata.image
        //         img.ui.avatar.compact.image.superzoom(src=term.watson.metadata.image)    
        strong #{this}

        
        
template(name='flat_home_tag_selector')
    // a.ui.big.image.basic.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    .ui.basic.tertiary.compact.tiny.button.zoomer.select_flat_tag(title="#{count} results" class="#{selector_class} #{thinking_class}")
        // if term
        //     if term.watson.metadata.image
        //         img.ui.mini.rounded.inline.image.superzoom(src=term.watson.metadata.image )    
        | #{this}
        // if in_dev
        //     small #{count}


template(name='post_view')
    with current_doc
        .ui.stackable.grid
            .row 
                .three.wide.column
                    .ui.basic.segment.say_content
                        a(href="/")
                            i.big.yin.yang.icon
                        .ui.inline.header.say_title #{title}
                        | #{_views} 
                        i.grey.eye.icon
                        +array_edit key='tags' i='tags' direct=true
                        +array_edit key='location_tags' i='marker' direct=true
                        +array_edit key='time_tags' i='clock' direct=true

                        +array_edit key='people_tags' i='user' direct=true
                .thirteen.wide.column.scrolling
                    +youtube_view key='youtube_id' label='youtube id' direct=true
                    .ui.basic.segment.say_content
                        |!{content}
                    .ui.fluid.icon.transparent.input
                        i.chat.icon
                        input.add_comment(type='text')
                    each comments
                        .ui.small.header #{body}
                        
                    a(href="/")
                        img.ui.fluid.image(src="{{c.url image_id }}" class=currentUser.invert_class)

template(name='post_edit')
    with current_doc
        .ui.stackable.padded.grid
            .row
                .ten.wide.column
                    a.ui.icon.large.button(href="/p/#{_id}" title='save')
                        i.checkmark.big.icon
                        // |save
                    .ui.inline.header
                        i.pencil.icon
                        // |edit post
                    i.large.link.remove.icon.delete_post
                    div.scrolling
                        +image_edit key='image_id' label='image' direct=true
                        +youtube_edit key='youtube_id' label='youtube id' direct=true
                    div 
                .six.wide.column
                    +text_edit key='title' label='title' direct=true
                    +html_edit key='content' label='content' direct=true
                    +array_edit key='tags' label='tags' i='tags' direct=true
                    each tags
                        +flat_home_tag_selector
                    +array_edit key='location_tags' label='location tags' i='marker' direct=true
                    +array_edit key='time_tags' label='time tags' i='clock' direct=true
                    +array_edit key='people_tags' label='people tags' i='users' direct=true
                
template(name='groups')
                