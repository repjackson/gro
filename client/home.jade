template(name='dao')
    .ui.stackable.grid
        .row
            .sixteen.wide.center.aligned.column
                // i.big.icon(class=search_icon_class)
                .ui.left.icon.rounded.input(class=thinking_class)
                    i.search.icon
                    // if skv_is 'thinking' true
                    //     i.big.yin.yang.loading.icon
                    // else 
                    //     i#clear_tags.link.yin.yang.big.icon(class=thinking_class)
                    // i.search.grey.icon
                    input.search_title(type='text' autofocus='' placeholder=doc_count)
                if selected_tags
                    each tag_results
                        +tag_selector
                if selected_tags
                    // if many_tags
                    //     a#clear_tags.ui.black.invert.icon.compact.button.select_term
                    //         i.remove.icon
                    each selected_tags
                        +unselect_tag
                else
                    .ui.header stack stats
                    .ui.small.header #{q_count} questions
                    .ui.small.header #{a_count} answers
                    .ui.small.header #{c_count} comments
                    .ui.small.header #{t_count} tags
                    .ui.small.header #{q_count} questions
                    .ui.small.header #{q_count} questions
                    .ui.small.header #{q_count} questions
                // .ui.header 
                //     i.smile.large.grey.icon
                //     |emotion
                // .spacer
                // .four.wide.column
                // .ui.large.basic.label(title='results') #{doc_count} results
                // .ui.basic.button(title='when')
                // i.clock.icon
                // +i n='clock' cl='ui mini inline image'
                // |when
                // .ui.basic.button(title='where')
                    // i.marker.icon
                // div
                // .ui.inline.header 
                //     +i n='reddit' cl='ui mini inline image'
                //     |subreddit
                // each subreddit_results
                //     +tag_selector
                //     // .ui.compact.small.tertiary.add_tag.button #{name}
                +skve k='view_more' v=true l='more' i='bars' ionly=false
                if skv_is 'view_more' true
                    +skve k='view_locations' v=true l='locations' i='marker' ionly=false
                    if skv_is 'view_locations' true
                        each location_results
                            +tag_selector
                    +skve k='view_people' v=true l='people' i='user outline' ionly=false
                    if skv_is 'view_people' true
                        each person_results
                            +tag_selector
                    +skve k='view_facilities' v=true l='facilities' i='building' ionly=false
                    if skv_is 'view_facilities' true
                        each facility_results
                            +tag_selector
                    +skve k='view_companies' v=true l='companies' i='briefcase' ionly=false
                    if skv_is 'view_companies' true
                        each company_results
                            +tag_selector
                    each tvshow_results
                        +tag_selector
                        // .ui.compact.small.tertiary.add_tag.button #{name}
                    +icon n='building' cl='ui mini inline image' t='organization'
                    each organization_results
                        +tag_selector
                        // .ui.compact.small.tertiary.add_tag.button #{name}
                    +icon n='trophy' cl='ui mini inline image' t='award'
                    each award_results
                        +tag_selector
                        // .ui.compact.small.tertiary.add_tag.button #{name}
                    div
                    .ui.inline.grey.header 
                        +icon n='paper' cl='ui mini inline image'
                        // |print media
                        // |where
                    each print_results
                        +tag_selector
                        // .ui.compact.small.tertiary.add_tag.button #{name}
                    +icon n='sport' cl='ui mini inline image' t='sport'
                    each sport_results
                        +tag_selector
                        // .ui.compact.small.tertiary.add_tag.button #{name}
                    +icon n='movie' cl='ui mini inline image' t='movie'
                    each movie_results
                        +tag_selector
                        // .ui.compact.small.tertiary.add_tag.button #{name}
                    each selected_emotions
                        .ui.black.compact.button.unselect_emotion
                            |#{this}
                    each emotion_results
                        if name
                            .ui.compact.basic.button.select_emotion
                                |#{name}
            if selected_tags
                .sixteen.wide.center.aligned.column
                    .scrollin
                        if alpha
                            +alpha
                        // each ducks
                        //     +duck 
                        |#{reddit_docs.count}
                        // if viewing_reddit
                        // .ui.dropdown
                        //     // span.text limit
                        //     i.dropdown.icon
                        //     .menu 
                        //         +skve k='limit' v=1 l='1'
                        //         +skve k='limit' v=10 l='10'
                        //         +skve k='limit' v=20 l='20'
                        //         // .item 1
                        //         // .item 5
                        //         // .item 10
                        //         // .item 20
                        // |sort
                        // +skve k='sort_key' v='_timestamp' l='when' i='clock'
                        // +skve k='sort_key' v='points' l='points' i='leaderboard'
                        // +skve k='sort_direction' v=-1 l='u' i='caret-up'
                        // +skve k='sort_direction' v=1 l='d' i='caret-down'
                        // |view
                        // +skve k='view_mode' v='cards' l='cards' i='clone' ionly=false
                        // +skve k='view_mode' v='list' l='list' i='list' ionly=false
                        if skv_is 'view_mode' 'list'
                            .ui.large.list 
                                each reddit_docs
                                    .item
                                        if is_image
                                            img.ui.small.image.pointer.zoomer.toggle_view(src=url)
                                        else if watson.metadata.image
                                            img.ui.rounded.small.pointer.zoomer.image.toggle_view(src=watson.metadata.image)    
                                        .content
                                            .header 
                                                |#{title}
                        else 
                            .ui.centered.stackable.cards
                                each reddit_docs
                                    +reddit_doc
                            
                        // else if skv_is 'main_section' 'wikipedia'
                        .ui.inline.header
                            i.large.wikipedia.icon
                            |#{wiki_docs.count} wikipedia
                        .ui.cards
                            each wiki_docs
                                +reddit_doc
                
                    
template(name='i')
    i.icon(name=i)
template(name='view_mode')
    a.ui.compact.icon.large.tertiary.button.toggle_view(class=toggle_view_button_class)
        // i.link.zoomer.icon(class="#{toggle_view_class} #{thinking_class}" title=k)
        // +i n=toggle_view_class
        +i n=i cl='ui mini image'
        // |#{k}

template(name='emotion_mode')
    .ui.compact.icon.big.basic.tertiary.button.toggle_emotion
        +i n=i cl='ui mini image'
        // i.link.zoomer.icon(class="#{toggle_emotion_class} #{thinking_class}" title=t)
        // |#{k}
    // if selected_emotion
    //     i.huge.pointer.zoomer.icon.toggle_emotion(class="#{i2} #{color}" title=t)
    //     // img.ui.inline.image.toggle_emotion.zoomer.pointer(src="https://img.icons8.com/color/50/000000/#{icon}.png" class=cl title=t)
    // else
    //     i.big.grey.pointer.zoomer.icon.toggle_emotion(class="#{i2}" title=t)
    //     // img.ui.inline.image.toggle_emotion.zoomer.pointer(src="https://img.icons8.com/ios/36/000000/#{icon}.png" class=cl title=t)


template(name='pull_reddit')
    .ui.icon.button.pull
        i.reddit.icon
        
template(name='call_watson')
    .ui.icon.basic.button.pull
        i.dna.large.teal.icon

template(name='convert')
    .ui.icon.button.convert
        i.exchange.icon


template(name='unselect_tag')
    a.unselect_tag.ui.black.compact.button.select_term(href='#')
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.image.superzoom(src=term.watson.metadata.image)    
        strong #{this}

template(name='tag_selector')
    // a.ui.big.image.basic.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    a.ui.zoomer.tertiary.button.say.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.avatar.image.zoomer(src=term.watson.metadata.image)    
        | #{name}
        // else
        small #{count}
        
template(name='select_subreddit')
    // a.ui.basic.button.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    a.ui.image.basic.label.pointer.zoomer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.image(src=term.watson.metadata.image)    
        | #{name}
        small #{count}

template(name='doc_tag')
    a.ui.image.large.basic.label.pointer.zoomer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            img.ui.avatar.compact.image(src=term.watson.metadata.image)    
        | #{this}
        small #{count}


template(name='duck')
    with content
        // .ui.segment
        .ui.inline.header #{Heading}
        // .item abstract #{Abstract}
        .item.abstract !{AbstractText}
        a.ui.icon.button(href=AbstractURL)
            // #{AbstractURL}
            i.large.external.icon
        img(src=Image)
        each RelatedTopics
            if Text
                // .ui.compact.button.topic
                .ui.pointer.small.header.topic(class=thinking_class)
                    img.ui.mini.inline.rounded.image(src=Icon.URL)
                    |#{Text}
                    // | {{lowered Text}}
            // .content
            //     .item #{FirstURL}
            //     .item !{Result}



    
    
template(name='tone')
    // h3 tone
    .ui.horizontal.list
        each tone.result.document_tone.tones
            .item #{tone_id} {{ to_percent score }}%
    .ui.list.l11
        each tone.result.sentences_tone
            .item(class=sentence_class)
                //- span #{sentence_id}
                span.tone_item.ui.text.say(title="#{sentence_id}" class="#{tone_size} #{sentence_color}") 
                    |{{lowered text}}
                    span.content
                        // .inline.header(title="#{sentence_id}") {{lowered text}}
                        |#{weight}
                        // i.chevron.up.link.grey.large.icon.upvote_sentence
                        // i.chevron.down.link.grey.large.icon.downvote_sentence
                        each tones
                            .ui.small.basic.label(class="{{calculated_size 'weight'}} #{tone_label_class}") 
                                span.ui.text
                                    |#{tone_id} &nbsp;
                                | {{ to_percent score }}% 
                        // .ui.mini.transparent.icon.input
                        //     input.tag_sentence(type='text' placeholder='tag')
                        // each tags 
                        //     .ui.label #{this}


template(name='call_tone')
    button.ui.large.basic.button.call
        i.download.icon
        |analyze tone
    if page_doc.tone 
        i.checkmark.icon