template(name='home')
    .ui.stackable.grid
        .sixteen.wide.left.aligned.column.seg
            if picked_tags
                .ui.left.icon.big.transparent.input
                    if is_loading
                        i.yin.yang.loading.large.icon
                    else
                        if nsfw_mode
                            i.large.fire.icon
                        else
                            if session_is 'simple'
                                i.yin.yang.large.grey.link.icon.simple_off(title='simple mode')
                            unless session_is 'simple'
                                i.sliders.horizontal.large.black.link.icon.simple_on(title='make advanced')
                    input.search_tag(type='text' value=query autofocus='' placeholder="search #{counter}")
                if many_tags
                    a#clear_tags
                        i.remove.link.circular.icon
                each picked_tags
                    +unpick_tag
            |&nbsp;
            unless picked_tags
                .ui.center.aligned.basic.segment
                    .ui.icon.massive.input
                        if is_loading
                            i.yin.yang.loading.large.icon
                        else
                            if nsfw_mode
                                i.large.fire.icon
                            else
                                i.yin.yang.large.icon
                        input.search_tag(type='text' value=query autofocus='' placeholder='search')
            unless simple
                i.fire.icon
                i.clock.icon
                i.chevron.down.icon
                i.chevron.right.icon
                i.chevron.left.icon
           
           
            // div
            each result_tags
                +tag_picker
            .ui.hidden.divider
            .ui.four.column.centered.stackable.grid.scrolling.pushed
                if alphas.count
                    .smallscroll
                        .column
                            +alpha
                each posts
                    +post_card_small
                
                
                
template(name='tag_picker')
    // a.ui.big.image.rounded.label.zoomer.pointer.pick_tag.pick_term(href='#' title="#{count} results" class="#{picker_class} #{thinking_class}")
    button.ui.basic.grey.tertiary.button.zoomer.pick_tag(title="#{count} results" class="#{picker_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.avatar.image.superzoom(src=term.watson.metadata.image )    
        strong #{name}
        // if in_dev
        //     small #{count}
            
template(name='unpick_tag')
    button.unpick_tag.ui.black.compact.large.secondary.button.invert
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.image.superzoom(src=term.watson.metadata.image)    
        strong #{this}

template(name='flat_tag_picker')
    // a.ui.big.image.rounded.label.zoomer.pointer.pick_tag.pick_term(href='#' title="#{count} results" class="#{picker_class} #{thinking_class}")
    a.ui.compact.small.basic.tertiary.button.zoomer.pick_flat_tag(title="#{count} results" class="#{picker_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.mini.rounded.inline.image.superzoom(src=term.watson.metadata.image )    
        | #{this}
        // if in_dev
        //     small #{count}

        
        
   
template(name='post_card_small')
    .column.smallscroll
        .content.zoomer.card_small.invert
            // a.ui.header.zoomer(href="/#{group}/p/#{_id}") #{title}
            // a.ui.center.aligned.small.header.view_post(href="/#{group}/p/#{_id}" class=emotion_color)
            a.ui.invert.small.header.thin.title.zoomer(href="/p/#{_id}")
                |#{lowered_title}
            
            // a(href=url target='_window')
            //     // |!{data.title} #{lowered_title}
            //     |#{lowered_title}
            span.ui.text {{ufrom data.created}}
            .spacer
            if embed
                span.rounded.full.invert
                    |!{embed}
                div
            else if is_image
                a(href=url target='_window')
                    img.ui.fluid.rounded.image.zoomer.toggle_view.invert(src="/p/#{_id}")
            else if watson.metadata.image
                img.ui.rounded.image.pointer.invert.call_meta(src=watson.metadata.image)
                    
            else if data.thumbnail_width
                a(href=url target='_window')
                    img.ui.fluid.rounded.image.zoomer.invert(src=data.thumbnail)    
            unless simple
                i.circular.chevron.down.icon.dl.invert
                span.invert
                    |#{ups}
                    i.thumbs.up.outline.icon
                    |#{comment_count}
                    i.chat.outline.icon
                with subreddit
                    +flat_tag_picker
                    // .ui.basic.label #{this}
                each five_tags
                    +flat_tag_picker
                a.ui.icon.compact.circular.basic.button(href="https://www.reddit.com#{permalink}" target='_window' title=domain)
                    // |#{domain}
                    i.external.icon
                // div
                .ui.tiny.invert.transparent.left.icon.input
                    i.tag.icon
                    input.add_tag(type='text' placeholder='...')
            .ui.hidden.divider   
            if data.selftext_html
                unless simple
                    span.invert.smallscroll
                        |{{#markdown}} !{data.selftext_html} {{/markdown}}
                        
                        
                        
template(name='alpha')
    each alphas
        if response.queryresult
            with response.queryresult
                // .ui.label #{datatypes}
                each split_datatypes
                    .ui.button.basic.compact.buton.select_datatype
                        |#{this}
                // .ui.list
                    // .item success: #{success}
                    // .item error: #{error}
                    // .item numpods: #{numpods}
                    // .item datatypes: #{datatypes}
                    //     each datatypes
                    //         .ui.button
                    //             |#{this}
                    // .item timedout: #{timedout}
                    // .item timedoutpods: #{timedoutpods}
                    // .item timing: #{timing}
                    // .item parsetiming: #{parsetiming}
                    // .item parsetimedout: #{parsetimedout}
                    // .item recalculate: #{recalculate}
                    // .item id: #{id}
                    // .item host: #{host}
                    // .item server: #{server}
                    // .item related: #{related}
                    // .item version: #{version}
                each pods
                    span.say
                        // .ui.small.inline.middle.aligned.header.middled #{title}
                        .ui.small.inline.header #{title}
                        div
                        // .item #{scanner}
                        // .item id #{id}
                        // .item position #{position}
                        // .item error #{error}
                        // .item numsubpods #{numsubpods}
                        // .item subpods
                        // .ui.list
                        each subpods
                            .ui.small.inline.header #{title}
                            img.ui.zoomer.pointer.image.invert.alphatemp(src=img.src)
                            // .item.alphatemp
                            // span.say #{plaintext}
                            // .item title: #{title}
                            // .item primary: #{primary}
                    // each tags
                    //     .ui.label #{this}
                    // .alphatemp voice: #{voice}
                    //   div assumptions": {
                    //     "type": "Clash",
                    //     "word": "time",
                    //     "template": "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead",
                    //     "count": 4,
                    //     "values": [
                    //       {
                    //         "name": "CalendarWord",
                    //         "desc": " referring to a calendar computation",
                    //         "input": "*C.time-_*CalendarWord-"
                    
                    
            // if many_tags
            //     each alpha_singles
            //         if response.queryresult
            //             +alpha 
