template(name='suser_layout')
    +nav
    unless stackuser_doc
        // .ui.header no user found
        .ui.hidden.divider
        .ui.hidden.divider
        .ui.hidden.divider
        .ui.center.aligned.basic.segment.search
            i.massive.grey.loading.yin.yang.link.icon
        // .ui.massive.fluid.circular.button.f17.zoomer.pointer.search 
        //     i.download.icon
            // |download user info
    with stackuser_doc
        .ui.stackable.padded.grid
            .row
                .three.wide.column
                    a.ui.basic.icon.circular.large.button.say_questions(href="/s/#{site}")
                        i.question.large.icon
                        // |questions
                    a.ui.basic.icon.circular.large.button.say_users(href="/s/#{site}/users")
                        i.users.large.icon
                        // |users
                    .ui.inline.header.say   
                        |#{site}
                    .spacer
                    a.ui.big.inline.header.say(class=post_header_class href="/s/#{site}/u/#{user_id}")
                        |!{display_name} 
                        small(title='reputation') {{ commafy reputation }}
                    small #
                    i.grey.clone.icon
                    strong.say(title="#{site} rank") {{commafy site_rank}}
                    div
                    i.stack.exchange.icon
                    small #
                    strong.say(title='global rank') {{commafy global_rank}}
                    div
                    // with location
                    //     +flat_tag_selector
                    .ui.inline.tertiary.button.set_location.zoomer.say
                        |!{location}
                    a(href="/s/#{site}/u/#{user_id}")
                        img.ui.rounded.inline.image.pointer.zoomer.boop(src=profile_image)
                    a.ui.large.compact.circular.basic.button(href=link target='_window' title="#{site} profile")
                        i.stack.exchange.icon
                        i.external.icon
                    .ui.vertical.fluid.stackable.small.menu
                        a.item.say(href="/s/#{site}/u/#{user_id}/questions" class="{{isActiveRoute regex='suser_questions'}}")
                            i.question.grey.icon
                            |#{question_count} questions
                        a.item.say(href="/s/#{site}/u/#{user_id}/answers" class="{{isActiveRoute regex='suser_a'}}")
                            i.reply.grey.icon
                            |#{answer_count} answers
                        a.item.say(href="/s/#{site}/u/#{user_id}/comments" class="{{isActiveRoute regex='suser_comments'}}")
                            i.chat.outline.grey.icon
                            |#{comment_count} comments
                        a.item.say(href="/s/#{site}/u/#{user_id}/tags" class="{{isActiveRoute regex='suser_tags'}}")
                            i.tag.grey.icon
                            |tags
                        a.item.say(href="/s/#{site}/u/#{user_id}/badges" class="{{isActiveRoute regex='suser_badges'}}")
                            i.certificate.grey.icon
                            |badges
                    +print_this
                    .ui.list
                        .item.say account id #{account_id}
                        .item.say user id #{user_id}
                        .item.say employee #{is_employee}
                        .item.say modified {{ufrom last_modified_date}}
                        .item.say accessed  {{ufrom last_access_date}}
                        .item.say created {{ufrom creation_date}}
                        .item.say #{user_type}
                        .item.say accepts #{accept_rate}%                        
                        // .item badge_counts: #{badge_counts}
                        // .item profile_image: #{profile_image}
                        a.item(href=link target='_window') 
                            i.linkify.icon
                            |SE link
                        .item 
                            strong rep change
                        .item.say
                            |#{reputation_change_day} day
                        .item.say
                            |#{reputation_change_week} week
                        .item.say
                            |#{reputation_change_month} month
                        .item.say
                            |#{reputation_change_quarter} quarter
                        .item.say
                            |#{reputation_change_year} year
                        .item.say
                            |#{down_vote_count}
                            i.thumbs.down.outline.icon
                            |down votes
                        .item.say
                            i.thumbs.up.outline.icon
                            | #{up_vote_count}
                            |up votes
                        .item.say
                            i.eye.icon
                            | #{view_count}
                            |views
                    .ui.inline.header 
                        |#{max_emotion_name} #{max_emotion_percent}
                    div
                .twelve.wide.column
                    +yield
                    
template(name='suser_questions')
template(name='suser_badges')
template(name='suser_tags')
template(name='suser_a')
    each suser_a_tags
        +tag_selector
    .ui.dividing.header.get_answers
        i.reply.icon
        |#{user_answers.count} answers
    .ui.list.medscroll
        each user_answers
            +user_answer_item
            .ui.divider

template(name='suser_dashboard')
    .ui.stackable.grid
        .eight.wide.column
            .f11.say
                |!{about_me}
                +say k='about_me'
            if website_url
                a.ui.basic.button.say(href=website_url target="_window")
                    i.globe.icon
                    |#{website_url}
            .ui.small.inline.header top emotions
            .ui.inline.header #{user_top_emotion}
            each user_top_emotions
                .ui.basic.label #{title}
                    small #{count}
            .smallscroll
                .ui.grey.small.inline.header
                    i.tag.icon
                    |#{tags.length} tags
                each tags
                    +flat_tag_selector
                    // .ui.tertiary.button #{this}
            .ui.grey.header 
                i.rss.icon
                |feed
            each user_events
                +u_event
            a.ui.inline.header.zoomer.say(href="/s/#{site}/u/#{user_id}/q")
                .ui.header #{title}
                i.question.icon
                |#{user_questions.count} questions
            if skv_is 'view_qtags' true
                .ui.circular.black.zoomer.button.tog_qtags.agg
                    i.tag.icon
                    |#{user_tag_agg.length}
            unless skv_is 'view_qtags' true
                .ui.tertiary.zoomer.button.tog_qtags.agg
                    i.tag.icon
                    |#{user_tag_agg.length}
            if skv_is 'view_qtags' true
                each user_tag_agg
                    .ui.tertiary.small.button #{title}
                        small #{count}
            if skv_is 'view_detail' true
                .ui.black.circular.compact.icon.button.toggle_detail
                    i.list.icon
                    // |detail
            else
                .ui.compact.circular.basic.icon.button.toggle_detail
                    i.list.icon
                    // |simple
    
            div
            .scrolling
                each user_questions
                    +user_question_item
        .eight.wide.column
            a.ui.dividing.header.pointer.get_comments(href="/s/#{site}/u/#{user_id}")
                i.chat.outline.icon
                |#{user_comments.count} comments
            .ui.list.medscroll
                each user_comments
                    +user_comment_item
                    .ui.divider
            a.ui.dividing.header.get_answers(href="/s/#{site/u/#{user_id}")
                i.reply.icon
                |#{user_answers.count} answers
            .ui.list.medscroll
                each user_answers
                    +user_answer_item
                    .ui.divider
            div
            .ui.grey.small.header 
                i.fork.icon
                |related accounts
            each related_accounts
                .ui.small.header !{title}
            with site_doc
                .ui.segment
                    a.ui.grey.header(href="/s/#{name}") #{name}
                        
            .ui.grey.header.get_badges.say
                i.certificate.icon
                |#{user_badges.count} badges
            .ui.horizontal.list
                .item.say 
                    +i n='medal2--v1' cl="#{currentUser.invert_class} ui avatar image"
                    |gold #{badge_counts.gold}
                .item.say 
                    +i n='medal-second-place--v1' cl="#{currentUser.invert_class} ui avatar image"
                    |silver #{badge_counts.silver}
                .item.say
                    +i n='medal2-third-place--v1' cl="#{currentUser.invert_class} ui avatar image"
                    |bronze #{badge_counts.bronze}
            // .ui.list.smallscroll
            each user_badges
                .ui.basic.label 
                    span.header #{name}
                    // span.description
                    //     |#{rank}
                    //     .ui.label #{badge_id}
                    //     a(href=link target="_window")
                    //         i.external.grey.icon
            .ui.header emotion
            .ui.large.list 
                .item joy avg
                .item sad avg
                .item disgust avg
                .item anger avg
                .item fear avg
        // .four.wide.column
    //     .ui.header.get_tags
    //         i.tag.icon
    //         |tags
    //     .ui.list
    //         each user_tags
    //             .item #{name}: #{count}
                            
template(name='suser_comments')
    with stackuser_doc
        .ui.horizontal.divider.pointer.get_comments
            i.chat.outline.icon
            |#{user_comments.count} comments
        .ui.list.scrolling
            each user_comments
                +user_comment_item
                .ui.divider


template(name='u_event')


template(name='user_comment_item')
    .ui.small.header.say(class=post_header_class) !{body}
    .ui.basic.large.label(title='score') #{score}
    .ui.horizontal.list
        with reply_to_user
            a.ui.small.header.say.item(href="/s/#{../site}/u/#{user_id}")
                img.ui.avatar.image(src=profile_image)
                |!{display_name}
                small {{ commafy reputation }}
                small !{location}
    +say k='body'
    // div
    a.ui.basic.button(href="/s/#{site}/q/#{post_id}")
        |#{post_type}
    if creation_date
        .ui.basic.say.label
            |added {{ufrom creation_date}}
    if last_access_date
        .ui.basic.say.label
            |accessed {{ufrom last_access_date}}
    if last_activity_date
        |active {{ufrom last_activity_date}}
    // |#{site}
    if in_dev
        +print_this
        // +remove_button
        // .ui.divider
    unless watson
        .ui.small.circular.basic.icon.button.call(title='analyze')
            i.dna.icon
    each tags
        +flat_tag_selector
        // .ui.tertiary.small.button.say #{this}
    +doc_emotion  
    
                            
template(name='user_answer_item')
    span.say #{score}: !{body}
    +say k='body'
    // hi#{answer_question.title}
    |#{site}
    if in_dev
        +print_this
        +remove_button
        // .ui.divider
    unless watson
        .ui.small.circular.basic.icon.button.call(title='analyze')
            i.dna.icon
    each tags
        +flat_tag_selector
        // .ui.tertiary.small.button.say #{this}
    +doc_emotion  

    
    
    
template(name='user_question_item')
    .ui.item
        a.ui.header.zoomer.say(href="/s/#{site}/q/#{question_id}" class=post_header_class)
            strong #{score}:
            |!{title}
        |!{about_me}
        +say k='about_me'
        .description
            if skv_is 'view_detail' true
                each tags 
                    .ui.tiny.basic.circular.tertiary.button.say #{this}
            +doc_emotion_small    
            span.say(title="#{view_count} views")
                i.grey.eye.icon
                |#{view_count}
            span.say(title="#{answer_count} answers")
                i.grey.reply.icon
                |#{answer_count}
            if creation_date
                span.say(title="created {{ufrom creation_date}}")
                    i.grey.clock.icon
                    |{{ufrom creation_date}}
            if last_modified_date
                i.pencil.icon
                |{{ufrom last_modified_date}}
            // .ui.large.label #{site}
            // .ui.large.label #{owner.display_name}
    .spacer