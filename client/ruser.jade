template(name='ruser')
    unless ruser_doc
        // .ui.header no user found
        .ui.hidden.divider
        .ui.hidden.divider
        .ui.hidden.divider
        .ui.center.aligned.basic.segment.search
            i.massive.grey.yin.yang.loading.link.icon.get_user_info
        // .ui.massive.fluid.button.f17.zoomer.pointer.search 
        //     i.download.icon
            // |download user info
    with ruser_doc
        .ui.stackable.padded.grid
            .row
                .four.wide.column
                    img.ui.small.image(src=data.snoovatar_img)
                    .ui.large.inline.header.get_user_posts(class=post_header_class)
                        |!{username} 
                        small(title='reputation') {{ commafy karma }}
                        // strong(title="#{site} rank") ##{site_rank} 
                        strong(title='global rank') ##{global_rank}
                    with data
                        .ui.small.list
                            .item #{total_karma} total karma
                            .item #{comment_karma} comment karma
                            .item #{link_karma} link karma
                            .item #{awardee_karma} awardee karma
                            .item #{awarder_karma} awarder karma
                            .item created {{ufrom created_utc}}
                        if is_gold
                            i.large.yellow.star.icon(title='is gold')
                        if is_mod
                            i.large.blue.shield.icon(title='is mod')
                        if has_verified_email
                            i.large.mail.icon(title='verified email')
                    // i.info.icon.get_user_info
                    img.ui.rounded.inline.image.pointer.zoomer(src=profile_image)
                    a.ui.compact.basic.icon.button(href="http://www.reddit.com/user/#{username}" target='_window' title="#{site} profile")
                        i.reddit.icon
                        i.external.icon
                    if in_dev
                        +print_this
                    +ruser_top_emotions
                    div
                    .ui.small.inline.header 
                        i.tag.icon
                        |top tags
                    each tags
                        .ui.compact.basic.button.search_tag #{this}
                .six.wide.column
                    // if selected_ruser_post_tags
                    //     each selected_ruser_post_tags
                    //         +ruser_post_unselect_tag
                    // .ui.icon.input
                    //     i.search.icon
                    //     input.search_ruser_postreddit(type='text')
                
                    .ui.inline.header 
                        i.edit.icon
                        |posts
                    each ruser_post_tag_results
                        // .ui.label #{this}
                        // +ruser_post_selector
                        .ui.basic.small.link.label.select_ruser_post_tag(title=count) #{name}
                        |&nbsp;
                    .scrolling
                        each ruser_posts
                            +ruser_post
                .six.wide.column
                    .ui.inline.header.get_user_comments
                        i.chat.outline.icon
                        |comments
                    each ruser_comment_tag_results
                        // .ui.label #{this}
                        // +ruser_post_selector
                        .ui.small.basic.label(title=count) #{name}
                    .scrolling
                        each rcomments
                            +ruser_comment
                            // .ui.divider
                    
                    
                    
template(name='ruser_top_emotions')
    .ui.header(title='rep is % x karma')
        i.smile.grey.icon
        |emotional averages
    .ui.small.inline.header {{ to_percent avg_sent_score}}% sentiment
    div
    .ui.green.small.inline.header
        | {{ to_percent avg_joy_score}}% joyful avg
        | {{fixed0 rep_joy}} rep ##{global_joy_rep_rank} rank
    div
    .ui.blue.small.inline.header
        | {{ to_percent avg_sadness_score}}% sad avg
        |{{fixed0 rep_sadness}} sad rep
        |##{global_sadness_rep_rank} rank
    div
    .ui.red.small.inline.header 
        | {{ to_percent avg_anger_score}}% angry avg
        | {{fixed0 rep_anger}} rep 
        |##{global_anger_rep_rank} rank
    div
    .ui.orange.small.inline.header
        | {{ to_percent avg_disgust_score}}% disgust avg
        |{{fixed0 rep_disgust}} disgust rep
        |##{global_disgust_rep_rank} rank
    div
    .ui.grey.small.inline.header
        | {{ to_percent avg_fear_score}}% fear avg
        |{{fixed0 rep_fear}} fear rep
        |##{global_fear_rep_rank} rank

                    
                                
template(name='ruser_post')
    .ui.seg
        if embed
            span.rounded.full
                |!{embed}
            div
        else if data.is_reddit_media_domain
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.fluid.rounded.zoomer.image.toggle_view(src=data.url)
        else if watson.metadata.image.length
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.rounded.inline.zoomer.image.toggle_view(src=watson.metadata.image)
        else if data.thumbnail.length
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.rounded.inline.zoomer.image.zoomer(src=data.thumbnail)    

        a.ui.small.inline.header(href="/r/#{subreddit}/post/#{_id}")
            // |#{data.ups}:
            |!{data.link_title} !{data.title}
        a.ui.label(href="/r/#{subreddit}") #{subreddit}
        each tags 
            +flat_sub_ruser_tag_selector
        +doc_emotion_small        
        |!{data.body}
        | #{data.ups}
        i.thumbs.up.outline.grey.icon
        | #{data.num_comments}
        i.comment.outline.grey.icon
        i.clock.icon
        each time_tags 
            .ui.small.basic.label #{this}

        .ui.label {{ufrom data.created}}
        if in_dev
            +print_this
    // .ui.divider                 
                            
template(name='ruser_doc_item')
    .ui.item
        if is_image
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.centered.rounded.zoomer.inline.small.image.toggle_view(src=data.url)
        else if watson.metadata.image
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.rounded.inline.small.image.zoomer.toggle_view(src=watson.metadata.image)
        else if data.thumbnail
            a.view_post(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
                img.ui.rounded.inline.small.image.zoomer(src=data.thumbnail)    
        a.ui.header.zoomer.say_title(href="/r/#{subreddit}/post/#{_id}" class=post_header_class)
            strong #{data.score}:
            |!{data.link_title} !{data.title}
        .description
            // if skv_is 'view_detail' true
            each tags 
                +flat_sub_ruser_tag_selector
            // +doc_emotion_small    
            span(title="#{view_count} views")
                i.grey.eye.icon
                |#{view_count}
            if creation_date
                span(title="created {{ufrom creation_date}}")
                    i.grey.clock.icon
                    |{{ufrom creation_date}}
            if last_modified_date
                i.pencil.icon
                |{{ufrom last_modified_date}}
            .ui.basic.label #{data.domain}
            .ui.basic.label #{data.num_comments}
            .ui.basic.label #{data.subreddit}
            // .ui.large.label #{owner.display_name}
    .spacer
    
    
    
template(name='ruser_comment')                    
    .call_watson_comment
        .ui.small.inline.header {{data.score}}
        span.metadata 
            span.date {{ufrom data.created}}
            +doc_emotion_small
        .pointer.say(class=post_header_class)
            |{{#markdown}} {{data.body}} {{/markdown}}
        each tags 
            +flat_sub_ruser_tag_selector
            // .ui.tiny.basic.label #/{this}
        a.author.say(href="/r/#{data.subreddit}") #{data.subreddit}
        if in_dev
            +print_this
        i.clock.icon
        each time_tags 
            .ui.small.label #{this}
        // .actions

template(name='rusers')
    .ui.stackable.padded.grid
        .four.wide.column.scrolling
            .ui.inline.header 
                i.reddit.icon
                |reddit users
            // i.tag.large.icon
            .ui.small.fluid.icon.input
                i.search.icon
                input.search_tags(type='text')
            if selected_ruser_tags
                // #clear_tags.ui.grey.icon.compact.circular.button
                //     i.remove.icon
                each selected_ruser_tags
                    .unselect_ruser_tag.ui.black.compact.circular.button
                        strong !{this}
            each all_ruser_tags
                .ui.compact.circular.basic.small.button.select_ruser_tag(class=cloud_tag_class title=count) !{this.name}
                    // small #{this.count}
            .ui.small.header sort by
            +ruser_karma_sort_button l='total' i='yin yang' c=''
            +ruser_karma_sort_button l='link' i='edit' c=''
            +ruser_karma_sort_button l='comment' i='chat outline' c=''
            +ruser_karma_sort_button l='joy' i='smile' c='green'
            +ruser_karma_sort_button l='anger' i='' c='red'
            +ruser_karma_sort_button l='sadness' i='' c='blue'
            +ruser_karma_sort_button l='disgust' i='' c='orange'
            +ruser_karma_sort_button l='fear' i='' c='grey'
            // unless all_tags.count
            //     .ui.basic.center.aligned.segment
            //         .ui.placeholder 
            //             .paragraph
            //                 .line
            //                 .line
            //                 .line
            //                 .line
        .twelve.wide.column.scrolling
            .ui.left.icon.input(class="{{#if current_username_query}} focus {{/if}}")
                if current_username_query
                    i.remove.link.icon.clear_username
                else    
                    i.user.icon
                input.search_username(type='text' placeholder='username' value=current_username_query)
            // .ui.left.icon.input(class="{{#if current_location_query}} focus {{/if}}")
            //     if current_location_query
            //         i.remove.link.icon.clear_location
            //     else
            //         i.marker.link.icon.clear_location
            //     input.search_location(type='text' placeholder='location' value=current_location_query)
            .spacer
            .ui.stackable.centered.equal.width.grid.scrolling
                unless users.count
                    .ui.basic.center.aligned.segment
                        // i.massive.loading.grey.yin.yang.icon
                        .ui.placeholder 
                            .image
                            .paragraph
                                .line
                                .line
                                .line
                                .line
                each users
                    +ruser_small
                    
template(name='ruser_small')
    .four.wide.column
        a.select_user(href="/user/#{username}")
            img.ui.circular.small.image.zoomer(src=data.snoovatar_img)
        .content
            a.ui.zoomer.header.select_user(href="/user/#{username}" class=post_header_class)
                |!{username}
                .ui.basic.circular.label(title='total karma')
                    i.grey.yin.yang.icon
                    |{{ commafy data.total_karma }}
                .ui.basic.circular.label(title='post karma')
                    i.grey.edit.icon
                    |{{ commafy data.link_karma }}
                .ui.basic.circular.label(title='comment karma')
                    i.grey.chat.outline.icon
                    |{{ commafy data.comment_karma }}
                // .ui.basic.label(class=sentiment_class) {{to_percent sentiment_avg}}% #{doc_sentiment_label}
            .description
                if global_rank
                    strong(title='global rank') ##{global_rank}
                span(title='created')
                    i.grey.clock.icon
                    | {{ufrom data.created}}
                .ui.label(title='accept rate') #{accept_rate}%
                // .ui.circular.compact.basic.button.set_location
                //     i.grey.marker.icon
                //     |!{location}
                each ten_tags
                    .ui.small.compact.tertiary.button.add_tag #{this}
                if user_top_emotion
                    .ui.inline.header #{user_top_emotion}
                +ruser_top_emotion_small
            
                // if user_top_emotions
                // each user_top_emotions
                //     .ui.basic.label #{title}
                //         small #{count}
                // if is_dev 
                +print_this
     
template(name='ruser_karma_sort_button')     
    .ui.compact.button.sort(class="#{c} #{button_class}")
        if i 
            i.icon(class=i)
        |#{l} karma
            
            
template(name='ruser_top_emotion_small')
    .ui.basic.label {{ to_percent avg_sent_score}} sentiment
    .ui.green.small.basic.label
        | {{ to_percent avg_joy_score}}% joy
        | {{fixed0 rep_joy}} ##{global_joy_rep_rank}

    .ui.blue.small.basic.label
        |{{fixed0 rep_sadness}} sad
        | {{ to_percent avg_sadness_score}}% ##{global_sadness_rep_rank}

    .ui.red.small.basic.label 
        | {{ to_percent avg_anger_score}}% anger
        | {{fixed0 rep_anger}} rep ##{global_anger_rep_rank}

    .ui.orange.small.basic.label
        |{{fixed0 rep_disgust}} disgust
        | {{ to_percent avg_disgust_score}}% ##{global_disgust_rep_rank}

    .ui.grey.small.basic.label
        |{{fixed0 rep_fear}} fear
        | {{ to_percent avg_fear_score}}% ##{global_fear_rep_rank}
                        
        