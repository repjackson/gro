template(name='love')
    .ui.padded.grid
        .sixteen.wide.center.aligned.column
            // .ui.header 
            //     i.heart.icon
            //     |love
            .ui.labeled.large.input
                .ui.big.basic.label L
                input.add_l(type='text' placeholder='...')
            .ui.labeled.large.input
                .ui.big.basic.label O
                input.add_o(type='text' placeholder='...')
            .ui.labeled.large.input
                .ui.big.basic.label V
                input.add_v(type='text' placeholder='...')
            .ui.labeled.large.input
                .ui.big.basic.label E
                input.add_e(type='text' placeholder='...')
            .ui.labeled.input
                .ui.large.basic.label 
                    i.marker.grey.icon
                    |location
                input.add_location(type='text' placeholder='...')
            .ui.labeled.input
                .ui.large.basic.label 
                    i.outline.user.grey.icon
                    |author
                input.add_author(type='text' placeholder='...')
            
            if can_submit
                .ui.circular.button.submit
                    |submit
            else
                .ui.basic.circular.button.submit
                    i.send.icon
                    |submit
        .sixteen.wide.center.aligned.column
            .ui.inline.header 
                |#{expressions.count}
                |expressions
            i.large.clock.icon
            i.large.thumbs.up.icon
            if selected_love_tags
                // if many_tags
                //     a#clear_tags.ui.black.invert.icon.compact.button.select_term
                //         i.remove.icon
                each selected_love_tags
                    +love_unselect_tag
            .ui.icon.input
                i.search.icon
                input.search_group_tag(type='text' value=group_query)
            each love_result_tags
                // .ui.label #{this}
                +love_tag_selector
            .ui.stackable.four.column.grid
                .column
                    .ui.inline.big.header l
                    each picked_l
                        a.unpick_l.ui.active.large.compact.button(href='#')
                            strong #{this}
                    each l_results
                        .ui.basic.circular.label.pick_l #{name}
                .column
                    .ui.inline.big.header o
                    each picked_o
                        a.unpick_o.ui.active.large.compact.button(href='#')
                            strong #{this}
                    each o_results
                        .ui.basic.circular.label.pick_o #{name}
                .column
                    .ui.inline.big.header v
                    each picked_v
                        a.unpick_v.ui.active.large.compact.button(href='#')
                            strong #{this}
                    each v_results
                        .ui.basic.circular.label.pick_v #{name}
                .column
                    .ui.inline.big.header e
                    each picked_e
                        a.unpick_e.ui.active.large.compact.button(href='#')
                            strong #{this}
                    each e_results
                        .ui.basic.circular.label.pick_e #{name}
                        // +love_tag_selector
            i.big.clock.grey.icon(title='when tags')
            if selected_love_author_tags
                each selected_love_author_tags
                    a.unselect_author_tag.ui.active.large.compact.button(href='#')
                        strong #{this}
            each love_author_tags
                .ui.compact.small.button.zoomer.select_author_tag(title="#{count} results" class="#{selector_class} #{thinking_class}")
                    strong #{name}
            
            .ui.hidden.divider
            .ui.stackable.four.column.centered.grid.scrolling
                each expressions
                    .center.aligned.column
                        .content 
                            .ui.header #{l_value} #{o_value} #{v_value} #{e_value}
                            i.thumbs.up.link.outline.icon.upvote
                            |#{points}
                            i.thumbs.down.link.outline.icon.downvote
                            |#{when}
                            .ui.tiny.icon.input
                                i.grey.tag.icon
                                input.add_tag(type='text' placeholder='+')
                            each tags
                                .ui.small.basic.circular.label #{this}
                                
                                
                                
                                
                                
template(name='love_tag_selector')
    // a.ui.big.image.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    .ui.compact.basic.circular.tertiary.button.zoomer.select_tag(title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.mini.inline.image.superzoom(src=term.watson.metadata.image )    
        strong #{name}
        // if in_dev
        //     small #{count}
        
template(name='love_unselect_tag')
    a.unselect_tag.ui.large.active.compact.button(href='#')
        if term
            if term.watson.metadata.image
                img.ui.avatar.compact.image.superzoom(src=term.watson.metadata.image)    
        strong #{this}

        
        
template(name='love_flat_tag_selector')
    // a.ui.big.image.rounded.label.zoomer.pointer.select_tag.select_term(href='#' title="#{count} results" class="#{selector_class} #{thinking_class}")
    .ui.compact.tiny.button.zoomer.select_flat_tag(title="#{count} results" class="#{selector_class} #{thinking_class}")
        if term
            if term.watson.metadata.image
                img.ui.mini.rounded.inline.image.superzoom(src=term.watson.metadata.image )    
        | #{this}
        // if in_dev
        //     small #{count}
