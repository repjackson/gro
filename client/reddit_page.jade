template(name='reddit_page')
    with current_doc
        .ui.stackable.padded.grid
            .twelve.wide.column
                a.ui.compact.circular.basic.button.say(href="/r/#{data.subreddit}")
                    i.chevron.left.icon
                    |#{data.subreddit}
                span.ui.pointer.text.f13.zoomer(class=post_header_class) !{data.title} #{data.link_title}
                // .ui.basic.circular.button.get_post permalink #{permalink}
                span.rounded.full
                    |!{embed}
                if is_image
                    img.ui.centered.rounded.image(src=data.url)
                else if watson.metadata.image
                    img.ui.rounded.image(src=watson.metadata.image)
                // small #{max_emotion_name}
                if is_video
                    div
                    // iframe(width="100%" height="600" src="https://v.redd.it/9vk3khyb08e51/DASH_360.mp4?source=fallback" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
                    iframe(width="100%" height="600" src=url frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
                +skve k='doc_section' v='main' l='main' i='content'
                +skve k='doc_section' v='watson' l='watson' i='dna'
                +skve k='doc_section' v='preview' l='preview' i='content'
                .scrollin
                    if skv_is 'doc_section' 'watson'
                        +watson_view
                    if skv_is 'doc_section' 'preview'
                        iframe(width="100%" height="800" src=data.url frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)        
                    .spacer
                    // img(src=url)
                    span.say !{data.html}
                    .spacer
                    if parsed_selftext_html
                        .ui.segment
                            |!{parsed_selftext_html}
                    if data.selftext
                        // .ui.segment
                        .ui.basic.segment.say
                            |{{#markdown}} {{data.selftext}} {{/markdown}}
                    else if data.body
                        div
                        .ui.segment.say
                            |{{nl2br data.body}}
                    else if data.body_html
                        div
                        .ui.segment.say
                            |!{data.body_html}
                    if data.link_url
                        img.ui.image(src=data.link_url)
                    img.ui.image(src=data.url)
                    // div(style='position:relative; padding-bottom:calc(125.00% + 44px)')
                    //     iframe(src='https://gfycat.com/ifr/MeanFatAmurratsnake' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen)
                    |{{selftext}}
                    .rounded
                        |!{embed}
                    // +convert
                    .spacer
                    // a.ui.icon.big.basic.button(href=url target='_window' title=domain)
                    //     i.external.icon
                    //     |view site 
                    //     |#{data.domain}
                    // a.ui.center.aligned.header(href=url target='_window' class=post_header_class title=url) #{title}
    
                    // .spacer
                    // div
                    if tone
                        +tone
                        // +skve k='doc_section' v='money' l='money' i='money'
                        // if skv_is 'doc_section'
                    |#{tags.length}
                    each tags
                        +flat_sub_tag_selector
                    .ui.horizontal.divider.get_post_comments
                        i.grey.comment.outline.icon
                        |#{rcomments.count} comments
                    // .ui.items
                    each rcomments
                        +rcomment
            .four.wide.column
                if in_dev
                    +print_this
                a.ui.basic.circular.button(href=data.url target="_window" title=data.url) 
                    i.external.icon
                    |url
                .ui.large.basic.label
                    | #{data.domain}
                if data.thumbnail
                    img.ui.fluid.rounded.image(src=data.thumbnail)
                // .ui.header #{data.domain}
                a.ui.basic.fluid.button(href="https://www.reddit.com#{data.permalink}" target="_window") 
                    i.external.grey.icon
                    |r/#{data.subreddit}
                .spacer
                // a.ui.fluid.basic.button(href="https://www.reddit.com/u/#{author}" target='_window')
                a.ui.fluid.basic.button.goto_ruser(href="/user/#{data.author}")
                    i.user.outline.icon
                    |#{data.author}
                +call_watson id=_id key='data.url' durl=data.url mode='url'
                if watson
                    +doc_emotion
                    unless tone
                        +call_tone    
                a.ui.large.basic.label(href=data.url target='_window')
                    | #{data.url}
                if in_dev
                    .ui.small.header reddit_id #{data.reddit_id}
                .ui.basic.label
                    i.comment.outline.icon
                    |#{data.comment_count}
                .ui.basic.label
                    i.thumbs.up.outline.icon
                    |#{data.ups}
                |{{to_percent data.upvote_ratio}}%
                .ui.small.inline.header #{data.num_crossposts} crossposts
                
                

template(name='rcomment')                
    .ui.grid.call_watson_comment
        .sixteen.wide.column
            a.author.say(href="/user/#{data.author}") #{data.author}
            span.metadata 
                span.date {{ufrom data.created}}
                span.date {{data.score}}
                +doc_emotion_small
            .say(class=post_header_class)
                |{{#markdown}} {{data.body}} {{/markdown}}
            .actions
                each tags 
                    +flat_sub_tag_selector
                    // .ui.tiny.basic.label #/{this}
        if data.replies.data.children
            .ui.grid
                each data.replies.data.children
                    .one.wide.column
                    .fifteen.wide.column
                        a.author(href="/user/#{data.author}") #{data.author}
                        .content
                            |{{#markdown}} {{data.body}} {{/markdown}}
                            // .text.say #{data.score} #{data.body}
            // if in_dev
            //     +print_this
                