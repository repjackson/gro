template(name='profile')
    with user
        .ui.stackable.padded.grid
            .four.wide.column
                span.mobile.only
                    a(href="/u/#{username}/")
                        img.ui.centered.tiny.inline.spaced.circular.image(src="{{c.url profile_image_id height=500 width=500 gravity='face' crop='fill'}}")
                span.mobile.hidden
                    if editing_mode
                        +image_edit k='profile_image_id' icon='picture' title='avatar' d=true
                    else 
                        a(href="/u/#{username}/")
                            img.ui.small.inline.circular.invert.image.boop(src="{{c.url profile_image_id height=500 width=500 gravity='face' crop='fill'}}") 
                a.ui.header.refresh_user_stats(href="/u/#{username}") 
                    |#{name}
                // div
                a.ui.small.header.refresh_user_stats(href="/u/#{username}") 
                    |@#{username}
                if is_current_user
                    a(href="/u/#{username}/edit")
                        i.big.cog.pointer.icon
                if is_dev
                    .ui.small.inline.header #{_id}
                if i_have_points
                    .ui.circular.button.send(title='send points')
                        i.gift.large.icon
                        span send pts
                    // .ui.circular.button.request(title='request points')
                    //     i.concierge.bell.large.teal.icon
                    //     span request
                        
                if is_current_user
                    a.ui.circular.button.logout(href="#" title='log out')
                        i.sign.out.large.icon
                        |log out
                
                unless is_current_user
                    if currentUser
                        // div
                        +user_friend_button 
                if is_dev
                    +print_this
                .ui.selection.link.list
                    each friends
                        a.profile_nav_item.item(href="/u/#{username}" title=username)
                            if profile_image_id
                                img.ui.avatar.invert.image(src="{{c.url profile_image_id height=500 width=500 gravity='face' crop='fill'}}")
                            else
                                .ui.circular.label.image #{initials}
                            .content
                                .header #{username}
            .twelve.wide.column 
                +skve k='profile_section' v='dashboard' l='dashboard' i='dashboard'
                +skve k='profile_section' v='friends' l='friends' i='groups'
                +skve k='profile_section' v='finance' l='finance' i='money'
                +skve k='profile_section' v='posts' l='posts' i='blog'
                +skve k='profile_section' v='tribes' l='tribes' i='campfire'
                +skve k='profile_section' v='questions' l='questions' i='faq'
                +skve k='profile_section' v='answers' l='answers' i='rss'
                if skv_is 'profile_section' 'dashboard'
                    .ui.header #{points_earned}pts earned
                    +user_dashboard
                else if skv_is 'profile_section' 'friends'
                    .ui.header friends
                else if skv_is 'profile_section' 'finance'
                    .ui.header finance
                    
              


template(name='authored_overlap')
    .ui.inline.header
        i.edit.icon
        |authored overlap
    .ui.three.column.grid
        .column
            .ui.header them
            each current_user.authored_tags
                .ui.label #{title}:#{count}
        .column
            .ui.header union
            each overlap
                .ui.label #{name}: #{count}
        .column
            .ui.header you #{currentUser.total_authored_points}
            each currentUser.authored_tags
                .ui.label #{title}:#{count}


template(name='user_rentals')
template(name='user_dashboard')
    .ui.stackable.padded.grid
        .eight.wide.column
            .ui.icon.fluid.input
                i.plus.icon
                input.add_post(type='text')
            each latest_posts
                +post_segment
        .eight.wide.column
            .ui.segment
                .ui.header 
                    |quick send
                if is_current_user
                    each friends 
                        a.profile_nav_item(href="/u/#{username}" title=username)
                            if profile_image_id
                                img.ui.mini.inline.circular.invert.image(src="{{c.url profile_image_id height=500 width=500 gravity='face' crop='fill'}}")
                            else
                                .ui.circular.label #{initials}
                else
                    .ui.button.tip
                        |+1
            each income
                .ui.tiny.header #{amount} #{_author.username}
            .ui.segment
                .ui.header topups
                .ui.icon.button.add_topup
                    i.plus.icon
                .ui.large.list
                    each topups
                        .item
                            .content
                                |#{_when} #{amount}
                                +remove_icon
            .ui.segment
                .ui.header questions
                .ui.icon.button.ask_question
                    i.plus.icon
                if asking_question
                    with question_asking
                        +text_edit k='title' d=true
                        +number_edit k='bounty' d=true 
                        .ui.button.save_question
                            i.checkmark.icon
                        +remove_button
                each questions_asked
                    .ui.segment.select_question
                        a.ui.pointer.header q:#{title}
                        .ui.label #{bounty}pts
                        
            .ui.header 
                i.big.money.icon(title='log events')
                |earnings
            .ui.header #{points} points
            i.big.rss.icon(title='log events')
            .ui.large.list
                each log_events
                    .item 
                        .content
                            .header #{body}
                            .meta #{when}
           
           
           
template(name='post_segment')           
    .ui.segment 
        .ui.small.header #{body}
        +voting_small
        i.reply.link.grey.icon
        i.clock.grey.icon
        i.eye.grey.icon
        i.remove.link.grey.icon.remove_post
        i.archive.link.grey.icon
        i.share.grey.icon
        +emotion_picker
        if replying
            .ui.fluid.input
                input.reply_body(type='text')
        .ui.grid
            .two.wide.column
            .fourteen.wide.column
                each replies
                    div
                    .ui.tiny.inline.header #{body}
                    if is_author
                        +remove_icon
           
           
                
template(name='emotion_picker')
    +emotion_pick k='joy' icon='smile' color='green' 
    +emotion_pick k='sadness' icon='frown' color='blue'
    +emotion_pick k='anger' icon='anger' color='red'
    +emotion_pick k='disgust' icon='tongue' color='orange'
    +emotion_pick k='fear' icon='exclamation' color='grey' 
    
template(name='emotion_pick')
    i.link.icon.pick(class="#{icon} #{pick_class} invert" title=key)


template(name='user_friend_button')
    if is_friend
        .ui.blue.circular.button.unfriend(title='unfriend')
            i.checkmark.large.icon
            |friends
    else
        .ui.circular.button.friend(title='friend')
            i.user.plus.large.icon
            |friend




template(name='cloud_comparison')
    .ui.inline.header
        // i.brain.icon
        +i name='brain'
        |cloud comparison
    // i.dropdown.icon
    .ui.two.column.stackable.grid
        // .column
        //     .ui.header you #{currentUser.total_upvoted_points}
        //     each currentUser.upvoted_tags
        //         a.ui.large.label.select_tag #{title}
        //             small #{count}
        // .column
        //     .ui.header union
        //     each overlap_results
        //         a.ui.huge.label.select_tag #{name}
        //             small #{count}
        .column
            .ui.header 
                +i name='brain'
                // i.brain.icon
                |mind
            // each friended_by
            //     a.ui.small.compact.button.select_user(class=friend_button_class)
            //         |#{username}
            each current_user.upvoted_tags
                a.ui.large.label.select_tag #{title}
                    small #{count}
        .column
            .ui.header 
                +i name='autumn'
                // i.cubes.icon
                |matter
            // each friended_by
            //     a.ui.small.compact.button.select_user(class=friend_button_class)
            //         |#{username}
            each current_user.credit_tags
                a.ui.large.label.select_tag #{title}
                    small #{count}

         
         
                        
template(name='user_credit_segment')
    .ui.segment.user_credit_segment.pointer.zoom
        if image_id
            img.ui.fluid.image(src="{{c.url image_id height=200 width=300 gravity='face' crop='fill'}}" class=currentUser.invert_class)
        .header
            strong #{amount}pt 
            // |from 
            if author.profile_image_id
                img.ui.avatar.image(src="{{c.url author.profile_image_id height=200 width=300 gravity='face' crop='fill'}}" class=currentUser.invert_class)
            |#{_author.username}
     #{when}
        div
        |#{description}
        div
        each tags
            .ui.mini.label #{this}


template(name='user_debit_segment')
    .ui.segment.user_debit_segment.pointer.zoom
        if image_id
            img.ui.fluid.image(src="{{c.url image_id height=200 width=300 gravity='face' crop='fill'}}" class=currentUser.invert_class)
        .header
            strong #{amount}pt
            | to 
            if recipient.profile_image_id
                img.ui.avatar.image(src="{{c.url recipient.profile_image_id height=200 width=300 gravity='face' crop='fill'}}" class=currentUser.invert_class)
            |#{recipient.username}
     #{when}
        div
        |#{description}
        div
        each tags
            .ui.mini.label #{this}
            
            
            
template(name='alerts')
    .ui.header
        i.rss.icon
        | alerts
    .ui.header notifiy when 
    .ui.big.link.list
        .item receive credit
        .item invited to event 
        .item invited to shift 
        .item personal request received             
        
        
template(name='edit_privacy')
    .ui.header
        +icolor name='private' cl='ui image'
        | privacy
    .ui.grid 
        .row 
            .four.wide.column
                +boolean_edit k='publish_profile' label='publish profile' d=true
            .twelve.wide.column
                .ui.header 
                    |make profile public 
                .ui.small.header 
                    |allow others to find your profile and follow you, allows you to follow others, enrolls you in public leaderboards
        .row 
            .sixteen.wide.column
                a.ui.basic.compact.button.logout_other_clients(href="#")
                    i.globe.icon
                    |log out other clients
                if is_admin
                    a.ui.basic.compact.button.force_logout(href="#")
                        i.shield.icon
                        |force log out
                
                .ui.header sessions
                .ui.large.list
                    each current_user.services.resume.loginTokens
                        .item #{when}: #{hashedToken}
        